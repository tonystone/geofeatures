///
///  LineStringTests.swift
///
///  Copyright (c) 2016 Tony Stone
///
///  Licensed under the Apache License, Version 2.0 (the "License");
///  you may not use this file except in compliance with the License.
///  You may obtain a copy of the License at
///
///  http://www.apache.org/licenses/LICENSE-2.0
///
///  Unless required by applicable law or agreed to in writing, software
///  distributed under the License is distributed on an "AS IS" BASIS,
///  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
///  See the License for the specific language governing permissions and
///  limitations under the License.
///
///  Created by Tony Stone on 2/10/2016.
///
import XCTest
import GeoFeatures

///
/// NOTE: This file was auto generated by gyb from file CoordinateCollectionTests.swift.gyb using the following command.
///
/// gyb --line-directive '' -DGeometryType=LineString -o LineString.swift CoordinateCollectionTests.swift.gyb
///
/// Do NOT edit this file directly as it will be regenerated automatically when needed.
///

// MARK: - Coordinate2D, FloatingPrecision, Cartesian -

class LineStringCoordinate2DFloatingPrecisionCartesianTests: XCTestCase {

    let precision = FloatingPrecision()
    let cs        = Cartesian()

    // MARK: Construction

    func testInitWithPrecisionAndCRS() {

        XCTAssertEqual(LineString<Coordinate2D>(precision: precision, coordinateSystem: cs).isEmpty, true)
    }

    func testInitWithPrecision() {

        XCTAssertEqual(LineString<Coordinate2D>(precision: precision).precision as? FloatingPrecision, precision)
    }

    func testInitWithCRS() {

        XCTAssertEqual(LineString<Coordinate2D>(coordinateSystem: cs).coordinateSystem as? Cartesian, cs)
    }

    func testInitWithTuple() {

        let input = LineString<Coordinate2D>(elements: [(x: 1.0, y: 1.0), (x: 2.0, y: 2.0)], precision: precision, coordinateSystem: cs)
        let expected = [Coordinate2D(tuple: (x: 1.0, y: 1.0)), Coordinate2D(tuple: (x: 2.0, y: 2.0))]

        XCTAssertTrue(
            (input.elementsEqual(expected) { (lhs: Coordinate2D, rhs: Coordinate2D) -> Bool in
                    return lhs == rhs
            }
        ), "\(input) is not equal to \(expected)")
    }

    func testInitCopy() {

        let input = LineString<Coordinate2D>(other: LineString<Coordinate2D>(elements: [(x: 1.0, y: 1.0), (x: 2.0, y: 2.0)]), precision: precision, coordinateSystem: cs)
        let expected = LineString<Coordinate2D>(elements: [(x: 1.0, y: 1.0), (x: 2.0, y: 2.0)], precision: precision, coordinateSystem: cs)

        XCTAssertTrue(
            (input.elementsEqual(expected) { (lhs: Coordinate2D, rhs: Coordinate2D) -> Bool in
                    return lhs == rhs
            }
        ), "\(input) is not equal to \(expected)")
    }

    // MARK: CustomStringConvertible & CustomDebugStringConvertible

    func testDescription() {

        let input = LineString<Coordinate2D>(elements: [Coordinate2D(tuple: (x: 1.0, y: 1.0)), Coordinate2D(tuple: (x: 2.0, y: 2.0))], precision: precision, coordinateSystem: cs)
        let expected = "LineString<Coordinate2D>((x: 1.0, y: 1.0), (x: 2.0, y: 2.0))"

        XCTAssertEqual(input.description, expected)
    }

    func testDebugDescription() {

        let input = LineString<Coordinate2D>(elements: [Coordinate2D(tuple: (x: 1.0, y: 1.0)), Coordinate2D(tuple: (x: 2.0, y: 2.0))], precision: precision, coordinateSystem: cs)
        let expected = "LineString<Coordinate2D>((x: 1.0, y: 1.0), (x: 2.0, y: 2.0))"

        XCTAssertEqual(input.debugDescription, expected)
    }

    // MARK: Collection conformance

    func testReserveCapacity() {

        var input = LineString<Coordinate2D>(precision: precision, coordinateSystem: cs)
        let expected = input.capacity * 2

        input.reserveCapacity(expected)

        XCTAssertEqual(input.capacity, expected)
    }

    func testAppend() {

        var input = LineString<Coordinate2D>(precision: precision, coordinateSystem: cs)
        let expected = [Coordinate2D(tuple: (x: 1.0, y: 1.0))]

        input.append((x: 1.0, y: 1.0))

        XCTAssertTrue(input.elementsEqual(expected) { (lhs: Coordinate2D, rhs: Coordinate2D) -> Bool in
                return lhs == rhs
        }, "\(input) is not equal to \(expected)")
    }

    func testAppendContentsOf() {

        let input1 = LineString<Coordinate2D>(elements: [(x: 1.0, y: 1.0), (x: 2.0, y: 2.0)], precision: precision, coordinateSystem: cs)
        var input2 = LineString<Coordinate2D>(precision: precision, coordinateSystem: cs)

        input2.append(contentsOf: input1)

        XCTAssertEqual(input1, input2)
    }

    func testAppendContentsOfCoordinates() {

        var input = LineString<Coordinate2D>(precision: precision, coordinateSystem: cs)
        let expected = [Coordinate2D(tuple: (x: 1.0, y: 1.0)), Coordinate2D(tuple: (x: 2.0, y: 2.0))]

        input.append(contentsOf: expected)

        XCTAssertTrue(input.elementsEqual(expected) { (lhs: Coordinate2D, rhs: Coordinate2D) -> Bool in
            return lhs == rhs
        }, "\(input) is not equal to \(expected)")
    }

    func testAppendContentsOfWithTuples() {

        var input = LineString<Coordinate2D>(precision: precision, coordinateSystem: cs)
        let expected = LineString<Coordinate2D>(elements: [Coordinate2D(tuple: (x: 1.0, y: 1.0)), Coordinate2D(tuple: (x: 2.0, y: 2.0))], precision: precision, coordinateSystem: cs)

        input.append(contentsOf: [(x: 1.0, y: 1.0), (x: 2.0, y: 2.0)])

        XCTAssertEqual(input, expected)
    }

    func testInsertCoordinate() {

        var input = LineString<Coordinate2D>(elements: [Coordinate2D(tuple: (x: 1.0, y: 1.0)), Coordinate2D(tuple: (x: 2.0, y: 2.0))], precision: precision, coordinateSystem: cs)
        let expected = [Coordinate2D(tuple: (x: 2.0, y: 2.0)), Coordinate2D(tuple: (x: 1.0, y: 1.0)), Coordinate2D(tuple: (x: 2.0, y: 2.0))]

        input.insert(Coordinate2D(tuple: (x: 2.0, y: 2.0)), at: 0)

        XCTAssertTrue(input.elementsEqual(expected) { (lhs: Coordinate2D, rhs: Coordinate2D) -> Bool in
                return lhs == rhs
            }, "\(input) is not equal to \(expected)")
    }

    func testInsertTuple() {

        var input = LineString<Coordinate2D>(elements: [Coordinate2D(tuple: (x: 1.0, y: 1.0)), Coordinate2D(tuple: (x: 2.0, y: 2.0))], precision: precision, coordinateSystem: cs)
        let expected = [Coordinate2D(tuple: (x: 2.0, y: 2.0)), Coordinate2D(tuple: (x: 1.0, y: 1.0)), Coordinate2D(tuple: (x: 2.0, y: 2.0))]

        input.insert((x: 2.0, y: 2.0), at: 0)

        XCTAssertTrue(input.elementsEqual(expected) { (lhs: Coordinate2D, rhs: Coordinate2D) -> Bool in
                return lhs == rhs
            }, "\(input) is not equal to \(expected)")
    }

    func testRemove() {

        var input = LineString<Coordinate2D>(elements: [Coordinate2D(tuple: (x: 1.0, y: 1.0)), Coordinate2D(tuple: (x: 2.0, y: 2.0))], precision: precision, coordinateSystem: cs)
        let expected = LineString<Coordinate2D>(elements: [Coordinate2D(tuple: (x: 2.0, y: 2.0))], precision: precision, coordinateSystem: cs)

        let _ = input.remove(at: 0)

        XCTAssertEqual(input, expected)
    }

    func testRemoveLast() {

        var input = LineString<Coordinate2D>(elements: [Coordinate2D(tuple: (x: 1.0, y: 1.0)), Coordinate2D(tuple: (x: 2.0, y: 2.0))], precision: precision, coordinateSystem: cs)
        let expected = LineString<Coordinate2D>(elements: [Coordinate2D(tuple: (x: 1.0, y: 1.0))], precision: precision, coordinateSystem: cs)

        let _ = input.removeLast()

        XCTAssertEqual(input, expected)
    }

    func testRemoveAll() {

        var input = LineString<Coordinate2D>(elements: [Coordinate2D(tuple: (x: 1.0, y: 1.0)), Coordinate2D(tuple: (x: 2.0, y: 2.0))], precision: precision, coordinateSystem: cs)
        let expected = LineString<Coordinate2D>(precision: precision, coordinateSystem: cs)

        input.removeAll()

        XCTAssertEqual(input, expected)
    }

    func testRemoveAllKeepingCapacity() {

        var input = LineString<Coordinate2D>(elements: [Coordinate2D(tuple: (x: 1.0, y: 1.0)), Coordinate2D(tuple: (x: 2.0, y: 2.0))], precision: precision, coordinateSystem: cs)
        let expected = input.capacity

        input.removeAll(keepingCapacity: true)

        XCTAssertEqual(input.capacity, expected)
    }

    // MARK: Swift.Collection Conformance

    func testSubscriptGet() {

        let input = LineString<Coordinate2D>(elements: [(x: 1.0, y: 1.0), (x: 2.0, y: 2.0)], precision: precision, coordinateSystem: cs)

        XCTAssertEqual(input[1], Coordinate2D(tuple: (x: 2.0, y: 2.0)))
    }

    func testSubscriptSet() {

        var input = LineString<Coordinate2D>(elements: [(x: 1.0, y: 1.0), (x: 2.0, y: 2.0)], precision: precision, coordinateSystem: cs)

        input[1] = Coordinate2D(tuple: (x: 1.0, y: 1.0))

        XCTAssertEqual(input[1], Coordinate2D(tuple: (x: 1.0, y: 1.0)))
    }

    func testEquals() {

        XCTAssertEqual(LineString<Coordinate2D>(elements: [Coordinate2D(tuple: (x: 1.0, y: 1.0)), Coordinate2D(tuple: (x: 2.0, y: 2.0))], precision: precision, coordinateSystem: cs).equals(LineString<Coordinate2D>(elements: [Coordinate2D(tuple: (x: 1.0, y: 1.0)), Coordinate2D(tuple: (x: 2.0, y: 2.0))], precision: precision, coordinateSystem: cs)), true)
    }

    func testIsEmpty() {

        XCTAssertEqual(LineString<Coordinate2D>(precision: precision, coordinateSystem: cs).isEmpty(), true)
    }

    func testIsEmptyFalse() {

        XCTAssertEqual(LineString<Coordinate2D>(elements: [Coordinate2D(tuple: (x: 1.0, y: 1.0)), Coordinate2D(tuple: (x: 2.0, y: 2.0))], precision: precision, coordinateSystem: cs).isEmpty(), false)
    }

    func testCount() {

        XCTAssertEqual(LineString<Coordinate2D>(elements: [Coordinate2D(tuple: (x: 1.0, y: 1.0)), Coordinate2D(tuple: (x: 2.0, y: 2.0))], precision: precision, coordinateSystem: cs).count, 2)
    }

    // MARK: Misc Internal

    func testEnsureUniquelyReferenced() {

        var input = LineString<Coordinate2D>(precision: precision, coordinateSystem: cs)
        let expected = input.capacity * 2

        let copy = input    // This should force the reserveCapacity to clone
        let _ = copy.capacity

        input.reserveCapacity(expected)

        XCTAssertEqual(input.capacity, expected)
    }

    func testResizeIfNeeded() {

        var input = LineString<Coordinate2D>(precision: precision, coordinateSystem: cs)
        let expected = input.capacity * 2

        /// Force it beyond its initial capacity
        for _ in 0..<input.capacity + 1 {
            input.append((x: 1.0, y: 1.0))
        }
        XCTAssertEqual(input.capacity, expected)
    }
}

// MARK: - Coordinate2DM, FloatingPrecision, Cartesian -

class LineStringCoordinate2DMFloatingPrecisionCartesianTests: XCTestCase {

    let precision = FloatingPrecision()
    let cs        = Cartesian()

    // MARK: Construction

    func testInitWithPrecisionAndCRS() {

        XCTAssertEqual(LineString<Coordinate2DM>(precision: precision, coordinateSystem: cs).isEmpty, true)
    }

    func testInitWithPrecision() {

        XCTAssertEqual(LineString<Coordinate2DM>(precision: precision).precision as? FloatingPrecision, precision)
    }

    func testInitWithCRS() {

        XCTAssertEqual(LineString<Coordinate2DM>(coordinateSystem: cs).coordinateSystem as? Cartesian, cs)
    }

    func testInitWithTuple() {

        let input = LineString<Coordinate2DM>(elements: [(x: 1.0, y: 1.0, m: 1.0), (x: 2.0, y: 2.0, m: 2.0)], precision: precision, coordinateSystem: cs)
        let expected = [Coordinate2DM(tuple: (x: 1.0, y: 1.0, m: 1.0)), Coordinate2DM(tuple: (x: 2.0, y: 2.0, m: 2.0))]

        XCTAssertTrue(
            (input.elementsEqual(expected) { (lhs: Coordinate2DM, rhs: Coordinate2DM) -> Bool in
                    return lhs == rhs
            }
        ), "\(input) is not equal to \(expected)")
    }

    func testInitCopy() {

        let input = LineString<Coordinate2DM>(other: LineString<Coordinate2DM>(elements: [(x: 1.0, y: 1.0, m: 1.0), (x: 2.0, y: 2.0, m: 2.0)]), precision: precision, coordinateSystem: cs)
        let expected = LineString<Coordinate2DM>(elements: [(x: 1.0, y: 1.0, m: 1.0), (x: 2.0, y: 2.0, m: 2.0)], precision: precision, coordinateSystem: cs)

        XCTAssertTrue(
            (input.elementsEqual(expected) { (lhs: Coordinate2DM, rhs: Coordinate2DM) -> Bool in
                    return lhs == rhs
            }
        ), "\(input) is not equal to \(expected)")
    }

    // MARK: CustomStringConvertible & CustomDebugStringConvertible

    func testDescription() {

        let input = LineString<Coordinate2DM>(elements: [Coordinate2DM(tuple: (x: 1.0, y: 1.0, m: 1.0)), Coordinate2DM(tuple: (x: 2.0, y: 2.0, m: 2.0))], precision: precision, coordinateSystem: cs)
        let expected = "LineString<Coordinate2DM>((x: 1.0, y: 1.0, m: 1.0), (x: 2.0, y: 2.0, m: 2.0))"

        XCTAssertEqual(input.description, expected)
    }

    func testDebugDescription() {

        let input = LineString<Coordinate2DM>(elements: [Coordinate2DM(tuple: (x: 1.0, y: 1.0, m: 1.0)), Coordinate2DM(tuple: (x: 2.0, y: 2.0, m: 2.0))], precision: precision, coordinateSystem: cs)
        let expected = "LineString<Coordinate2DM>((x: 1.0, y: 1.0, m: 1.0), (x: 2.0, y: 2.0, m: 2.0))"

        XCTAssertEqual(input.debugDescription, expected)
    }

    // MARK: Collection conformance

    func testReserveCapacity() {

        var input = LineString<Coordinate2DM>(precision: precision, coordinateSystem: cs)
        let expected = input.capacity * 2

        input.reserveCapacity(expected)

        XCTAssertEqual(input.capacity, expected)
    }

    func testAppend() {

        var input = LineString<Coordinate2DM>(precision: precision, coordinateSystem: cs)
        let expected = [Coordinate2DM(tuple: (x: 1.0, y: 1.0, m: 1.0))]

        input.append((x: 1.0, y: 1.0, m: 1.0))

        XCTAssertTrue(input.elementsEqual(expected) { (lhs: Coordinate2DM, rhs: Coordinate2DM) -> Bool in
                return lhs == rhs
        }, "\(input) is not equal to \(expected)")
    }

    func testAppendContentsOf() {

        let input1 = LineString<Coordinate2DM>(elements: [(x: 1.0, y: 1.0, m: 1.0), (x: 2.0, y: 2.0, m: 2.0)], precision: precision, coordinateSystem: cs)
        var input2 = LineString<Coordinate2DM>(precision: precision, coordinateSystem: cs)

        input2.append(contentsOf: input1)

        XCTAssertEqual(input1, input2)
    }

    func testAppendContentsOfCoordinates() {

        var input = LineString<Coordinate2DM>(precision: precision, coordinateSystem: cs)
        let expected = [Coordinate2DM(tuple: (x: 1.0, y: 1.0, m: 1.0)), Coordinate2DM(tuple: (x: 2.0, y: 2.0, m: 2.0))]

        input.append(contentsOf: expected)

        XCTAssertTrue(input.elementsEqual(expected) { (lhs: Coordinate2DM, rhs: Coordinate2DM) -> Bool in
            return lhs == rhs
        }, "\(input) is not equal to \(expected)")
    }

    func testAppendContentsOfWithTuples() {

        var input = LineString<Coordinate2DM>(precision: precision, coordinateSystem: cs)
        let expected = LineString<Coordinate2DM>(elements: [Coordinate2DM(tuple: (x: 1.0, y: 1.0, m: 1.0)), Coordinate2DM(tuple: (x: 2.0, y: 2.0, m: 2.0))], precision: precision, coordinateSystem: cs)

        input.append(contentsOf: [(x: 1.0, y: 1.0, m: 1.0), (x: 2.0, y: 2.0, m: 2.0)])

        XCTAssertEqual(input, expected)
    }

    func testInsertCoordinate() {

        var input = LineString<Coordinate2DM>(elements: [Coordinate2DM(tuple: (x: 1.0, y: 1.0, m: 1.0)), Coordinate2DM(tuple: (x: 2.0, y: 2.0, m: 2.0))], precision: precision, coordinateSystem: cs)
        let expected = [Coordinate2DM(tuple: (x: 2.0, y: 2.0, m: 2.0)), Coordinate2DM(tuple: (x: 1.0, y: 1.0, m: 1.0)), Coordinate2DM(tuple: (x: 2.0, y: 2.0, m: 2.0))]

        input.insert(Coordinate2DM(tuple: (x: 2.0, y: 2.0, m: 2.0)), at: 0)

        XCTAssertTrue(input.elementsEqual(expected) { (lhs: Coordinate2DM, rhs: Coordinate2DM) -> Bool in
                return lhs == rhs
            }, "\(input) is not equal to \(expected)")
    }

    func testInsertTuple() {

        var input = LineString<Coordinate2DM>(elements: [Coordinate2DM(tuple: (x: 1.0, y: 1.0, m: 1.0)), Coordinate2DM(tuple: (x: 2.0, y: 2.0, m: 2.0))], precision: precision, coordinateSystem: cs)
        let expected = [Coordinate2DM(tuple: (x: 2.0, y: 2.0, m: 2.0)), Coordinate2DM(tuple: (x: 1.0, y: 1.0, m: 1.0)), Coordinate2DM(tuple: (x: 2.0, y: 2.0, m: 2.0))]

        input.insert((x: 2.0, y: 2.0, m: 2.0), at: 0)

        XCTAssertTrue(input.elementsEqual(expected) { (lhs: Coordinate2DM, rhs: Coordinate2DM) -> Bool in
                return lhs == rhs
            }, "\(input) is not equal to \(expected)")
    }

    func testRemove() {

        var input = LineString<Coordinate2DM>(elements: [Coordinate2DM(tuple: (x: 1.0, y: 1.0, m: 1.0)), Coordinate2DM(tuple: (x: 2.0, y: 2.0, m: 2.0))], precision: precision, coordinateSystem: cs)
        let expected = LineString<Coordinate2DM>(elements: [Coordinate2DM(tuple: (x: 2.0, y: 2.0, m: 2.0))], precision: precision, coordinateSystem: cs)

        let _ = input.remove(at: 0)

        XCTAssertEqual(input, expected)
    }

    func testRemoveLast() {

        var input = LineString<Coordinate2DM>(elements: [Coordinate2DM(tuple: (x: 1.0, y: 1.0, m: 1.0)), Coordinate2DM(tuple: (x: 2.0, y: 2.0, m: 2.0))], precision: precision, coordinateSystem: cs)
        let expected = LineString<Coordinate2DM>(elements: [Coordinate2DM(tuple: (x: 1.0, y: 1.0, m: 1.0))], precision: precision, coordinateSystem: cs)

        let _ = input.removeLast()

        XCTAssertEqual(input, expected)
    }

    func testRemoveAll() {

        var input = LineString<Coordinate2DM>(elements: [Coordinate2DM(tuple: (x: 1.0, y: 1.0, m: 1.0)), Coordinate2DM(tuple: (x: 2.0, y: 2.0, m: 2.0))], precision: precision, coordinateSystem: cs)
        let expected = LineString<Coordinate2DM>(precision: precision, coordinateSystem: cs)

        input.removeAll()

        XCTAssertEqual(input, expected)
    }

    func testRemoveAllKeepingCapacity() {

        var input = LineString<Coordinate2DM>(elements: [Coordinate2DM(tuple: (x: 1.0, y: 1.0, m: 1.0)), Coordinate2DM(tuple: (x: 2.0, y: 2.0, m: 2.0))], precision: precision, coordinateSystem: cs)
        let expected = input.capacity

        input.removeAll(keepingCapacity: true)

        XCTAssertEqual(input.capacity, expected)
    }

    // MARK: Swift.Collection Conformance

    func testSubscriptGet() {

        let input = LineString<Coordinate2DM>(elements: [(x: 1.0, y: 1.0, m: 1.0), (x: 2.0, y: 2.0, m: 2.0)], precision: precision, coordinateSystem: cs)

        XCTAssertEqual(input[1], Coordinate2DM(tuple: (x: 2.0, y: 2.0, m: 2.0)))
    }

    func testSubscriptSet() {

        var input = LineString<Coordinate2DM>(elements: [(x: 1.0, y: 1.0, m: 1.0), (x: 2.0, y: 2.0, m: 2.0)], precision: precision, coordinateSystem: cs)

        input[1] = Coordinate2DM(tuple: (x: 1.0, y: 1.0, m: 1.0))

        XCTAssertEqual(input[1], Coordinate2DM(tuple: (x: 1.0, y: 1.0, m: 1.0)))
    }

    func testEquals() {

        XCTAssertEqual(LineString<Coordinate2DM>(elements: [Coordinate2DM(tuple: (x: 1.0, y: 1.0, m: 1.0)), Coordinate2DM(tuple: (x: 2.0, y: 2.0, m: 2.0))], precision: precision, coordinateSystem: cs).equals(LineString<Coordinate2DM>(elements: [Coordinate2DM(tuple: (x: 1.0, y: 1.0, m: 1.0)), Coordinate2DM(tuple: (x: 2.0, y: 2.0, m: 2.0))], precision: precision, coordinateSystem: cs)), true)
    }

    func testIsEmpty() {

        XCTAssertEqual(LineString<Coordinate2DM>(precision: precision, coordinateSystem: cs).isEmpty(), true)
    }

    func testIsEmptyFalse() {

        XCTAssertEqual(LineString<Coordinate2DM>(elements: [Coordinate2DM(tuple: (x: 1.0, y: 1.0, m: 1.0)), Coordinate2DM(tuple: (x: 2.0, y: 2.0, m: 2.0))], precision: precision, coordinateSystem: cs).isEmpty(), false)
    }

    func testCount() {

        XCTAssertEqual(LineString<Coordinate2DM>(elements: [Coordinate2DM(tuple: (x: 1.0, y: 1.0, m: 1.0)), Coordinate2DM(tuple: (x: 2.0, y: 2.0, m: 2.0))], precision: precision, coordinateSystem: cs).count, 2)
    }

    // MARK: Misc Internal

    func testEnsureUniquelyReferenced() {

        var input = LineString<Coordinate2DM>(precision: precision, coordinateSystem: cs)
        let expected = input.capacity * 2

        let copy = input    // This should force the reserveCapacity to clone
        let _ = copy.capacity

        input.reserveCapacity(expected)

        XCTAssertEqual(input.capacity, expected)
    }

    func testResizeIfNeeded() {

        var input = LineString<Coordinate2DM>(precision: precision, coordinateSystem: cs)
        let expected = input.capacity * 2

        /// Force it beyond its initial capacity
        for _ in 0..<input.capacity + 1 {
            input.append((x: 1.0, y: 1.0, m: 1.0))
        }
        XCTAssertEqual(input.capacity, expected)
    }
}

// MARK: - Coordinate3D, FloatingPrecision, Cartesian -

class LineStringCoordinate3DFloatingPrecisionCartesianTests: XCTestCase {

    let precision = FloatingPrecision()
    let cs        = Cartesian()

    // MARK: Construction

    func testInitWithPrecisionAndCRS() {

        XCTAssertEqual(LineString<Coordinate3D>(precision: precision, coordinateSystem: cs).isEmpty, true)
    }

    func testInitWithPrecision() {

        XCTAssertEqual(LineString<Coordinate3D>(precision: precision).precision as? FloatingPrecision, precision)
    }

    func testInitWithCRS() {

        XCTAssertEqual(LineString<Coordinate3D>(coordinateSystem: cs).coordinateSystem as? Cartesian, cs)
    }

    func testInitWithTuple() {

        let input = LineString<Coordinate3D>(elements: [(x: 1.0, y: 1.0, z: 1.0), (x: 2.0, y: 2.0, z: 2.0)], precision: precision, coordinateSystem: cs)
        let expected = [Coordinate3D(tuple: (x: 1.0, y: 1.0, z: 1.0)), Coordinate3D(tuple: (x: 2.0, y: 2.0, z: 2.0))]

        XCTAssertTrue(
            (input.elementsEqual(expected) { (lhs: Coordinate3D, rhs: Coordinate3D) -> Bool in
                    return lhs == rhs
            }
        ), "\(input) is not equal to \(expected)")
    }

    func testInitCopy() {

        let input = LineString<Coordinate3D>(other: LineString<Coordinate3D>(elements: [(x: 1.0, y: 1.0, z: 1.0), (x: 2.0, y: 2.0, z: 2.0)]), precision: precision, coordinateSystem: cs)
        let expected = LineString<Coordinate3D>(elements: [(x: 1.0, y: 1.0, z: 1.0), (x: 2.0, y: 2.0, z: 2.0)], precision: precision, coordinateSystem: cs)

        XCTAssertTrue(
            (input.elementsEqual(expected) { (lhs: Coordinate3D, rhs: Coordinate3D) -> Bool in
                    return lhs == rhs
            }
        ), "\(input) is not equal to \(expected)")
    }

    // MARK: CustomStringConvertible & CustomDebugStringConvertible

    func testDescription() {

        let input = LineString<Coordinate3D>(elements: [Coordinate3D(tuple: (x: 1.0, y: 1.0, z: 1.0)), Coordinate3D(tuple: (x: 2.0, y: 2.0, z: 2.0))], precision: precision, coordinateSystem: cs)
        let expected = "LineString<Coordinate3D>((x: 1.0, y: 1.0, z: 1.0), (x: 2.0, y: 2.0, z: 2.0))"

        XCTAssertEqual(input.description, expected)
    }

    func testDebugDescription() {

        let input = LineString<Coordinate3D>(elements: [Coordinate3D(tuple: (x: 1.0, y: 1.0, z: 1.0)), Coordinate3D(tuple: (x: 2.0, y: 2.0, z: 2.0))], precision: precision, coordinateSystem: cs)
        let expected = "LineString<Coordinate3D>((x: 1.0, y: 1.0, z: 1.0), (x: 2.0, y: 2.0, z: 2.0))"

        XCTAssertEqual(input.debugDescription, expected)
    }

    // MARK: Collection conformance

    func testReserveCapacity() {

        var input = LineString<Coordinate3D>(precision: precision, coordinateSystem: cs)
        let expected = input.capacity * 2

        input.reserveCapacity(expected)

        XCTAssertEqual(input.capacity, expected)
    }

    func testAppend() {

        var input = LineString<Coordinate3D>(precision: precision, coordinateSystem: cs)
        let expected = [Coordinate3D(tuple: (x: 1.0, y: 1.0, z: 1.0))]

        input.append((x: 1.0, y: 1.0, z: 1.0))

        XCTAssertTrue(input.elementsEqual(expected) { (lhs: Coordinate3D, rhs: Coordinate3D) -> Bool in
                return lhs == rhs
        }, "\(input) is not equal to \(expected)")
    }

    func testAppendContentsOf() {

        let input1 = LineString<Coordinate3D>(elements: [(x: 1.0, y: 1.0, z: 1.0), (x: 2.0, y: 2.0, z: 2.0)], precision: precision, coordinateSystem: cs)
        var input2 = LineString<Coordinate3D>(precision: precision, coordinateSystem: cs)

        input2.append(contentsOf: input1)

        XCTAssertEqual(input1, input2)
    }

    func testAppendContentsOfCoordinates() {

        var input = LineString<Coordinate3D>(precision: precision, coordinateSystem: cs)
        let expected = [Coordinate3D(tuple: (x: 1.0, y: 1.0, z: 1.0)), Coordinate3D(tuple: (x: 2.0, y: 2.0, z: 2.0))]

        input.append(contentsOf: expected)

        XCTAssertTrue(input.elementsEqual(expected) { (lhs: Coordinate3D, rhs: Coordinate3D) -> Bool in
            return lhs == rhs
        }, "\(input) is not equal to \(expected)")
    }

    func testAppendContentsOfWithTuples() {

        var input = LineString<Coordinate3D>(precision: precision, coordinateSystem: cs)
        let expected = LineString<Coordinate3D>(elements: [Coordinate3D(tuple: (x: 1.0, y: 1.0, z: 1.0)), Coordinate3D(tuple: (x: 2.0, y: 2.0, z: 2.0))], precision: precision, coordinateSystem: cs)

        input.append(contentsOf: [(x: 1.0, y: 1.0, z: 1.0), (x: 2.0, y: 2.0, z: 2.0)])

        XCTAssertEqual(input, expected)
    }

    func testInsertCoordinate() {

        var input = LineString<Coordinate3D>(elements: [Coordinate3D(tuple: (x: 1.0, y: 1.0, z: 1.0)), Coordinate3D(tuple: (x: 2.0, y: 2.0, z: 2.0))], precision: precision, coordinateSystem: cs)
        let expected = [Coordinate3D(tuple: (x: 2.0, y: 2.0, z: 2.0)), Coordinate3D(tuple: (x: 1.0, y: 1.0, z: 1.0)), Coordinate3D(tuple: (x: 2.0, y: 2.0, z: 2.0))]

        input.insert(Coordinate3D(tuple: (x: 2.0, y: 2.0, z: 2.0)), at: 0)

        XCTAssertTrue(input.elementsEqual(expected) { (lhs: Coordinate3D, rhs: Coordinate3D) -> Bool in
                return lhs == rhs
            }, "\(input) is not equal to \(expected)")
    }

    func testInsertTuple() {

        var input = LineString<Coordinate3D>(elements: [Coordinate3D(tuple: (x: 1.0, y: 1.0, z: 1.0)), Coordinate3D(tuple: (x: 2.0, y: 2.0, z: 2.0))], precision: precision, coordinateSystem: cs)
        let expected = [Coordinate3D(tuple: (x: 2.0, y: 2.0, z: 2.0)), Coordinate3D(tuple: (x: 1.0, y: 1.0, z: 1.0)), Coordinate3D(tuple: (x: 2.0, y: 2.0, z: 2.0))]

        input.insert((x: 2.0, y: 2.0, z: 2.0), at: 0)

        XCTAssertTrue(input.elementsEqual(expected) { (lhs: Coordinate3D, rhs: Coordinate3D) -> Bool in
                return lhs == rhs
            }, "\(input) is not equal to \(expected)")
    }

    func testRemove() {

        var input = LineString<Coordinate3D>(elements: [Coordinate3D(tuple: (x: 1.0, y: 1.0, z: 1.0)), Coordinate3D(tuple: (x: 2.0, y: 2.0, z: 2.0))], precision: precision, coordinateSystem: cs)
        let expected = LineString<Coordinate3D>(elements: [Coordinate3D(tuple: (x: 2.0, y: 2.0, z: 2.0))], precision: precision, coordinateSystem: cs)

        let _ = input.remove(at: 0)

        XCTAssertEqual(input, expected)
    }

    func testRemoveLast() {

        var input = LineString<Coordinate3D>(elements: [Coordinate3D(tuple: (x: 1.0, y: 1.0, z: 1.0)), Coordinate3D(tuple: (x: 2.0, y: 2.0, z: 2.0))], precision: precision, coordinateSystem: cs)
        let expected = LineString<Coordinate3D>(elements: [Coordinate3D(tuple: (x: 1.0, y: 1.0, z: 1.0))], precision: precision, coordinateSystem: cs)

        let _ = input.removeLast()

        XCTAssertEqual(input, expected)
    }

    func testRemoveAll() {

        var input = LineString<Coordinate3D>(elements: [Coordinate3D(tuple: (x: 1.0, y: 1.0, z: 1.0)), Coordinate3D(tuple: (x: 2.0, y: 2.0, z: 2.0))], precision: precision, coordinateSystem: cs)
        let expected = LineString<Coordinate3D>(precision: precision, coordinateSystem: cs)

        input.removeAll()

        XCTAssertEqual(input, expected)
    }

    func testRemoveAllKeepingCapacity() {

        var input = LineString<Coordinate3D>(elements: [Coordinate3D(tuple: (x: 1.0, y: 1.0, z: 1.0)), Coordinate3D(tuple: (x: 2.0, y: 2.0, z: 2.0))], precision: precision, coordinateSystem: cs)
        let expected = input.capacity

        input.removeAll(keepingCapacity: true)

        XCTAssertEqual(input.capacity, expected)
    }

    // MARK: Swift.Collection Conformance

    func testSubscriptGet() {

        let input = LineString<Coordinate3D>(elements: [(x: 1.0, y: 1.0, z: 1.0), (x: 2.0, y: 2.0, z: 2.0)], precision: precision, coordinateSystem: cs)

        XCTAssertEqual(input[1], Coordinate3D(tuple: (x: 2.0, y: 2.0, z: 2.0)))
    }

    func testSubscriptSet() {

        var input = LineString<Coordinate3D>(elements: [(x: 1.0, y: 1.0, z: 1.0), (x: 2.0, y: 2.0, z: 2.0)], precision: precision, coordinateSystem: cs)

        input[1] = Coordinate3D(tuple: (x: 1.0, y: 1.0, z: 1.0))

        XCTAssertEqual(input[1], Coordinate3D(tuple: (x: 1.0, y: 1.0, z: 1.0)))
    }

    func testEquals() {

        XCTAssertEqual(LineString<Coordinate3D>(elements: [Coordinate3D(tuple: (x: 1.0, y: 1.0, z: 1.0)), Coordinate3D(tuple: (x: 2.0, y: 2.0, z: 2.0))], precision: precision, coordinateSystem: cs).equals(LineString<Coordinate3D>(elements: [Coordinate3D(tuple: (x: 1.0, y: 1.0, z: 1.0)), Coordinate3D(tuple: (x: 2.0, y: 2.0, z: 2.0))], precision: precision, coordinateSystem: cs)), true)
    }

    func testIsEmpty() {

        XCTAssertEqual(LineString<Coordinate3D>(precision: precision, coordinateSystem: cs).isEmpty(), true)
    }

    func testIsEmptyFalse() {

        XCTAssertEqual(LineString<Coordinate3D>(elements: [Coordinate3D(tuple: (x: 1.0, y: 1.0, z: 1.0)), Coordinate3D(tuple: (x: 2.0, y: 2.0, z: 2.0))], precision: precision, coordinateSystem: cs).isEmpty(), false)
    }

    func testCount() {

        XCTAssertEqual(LineString<Coordinate3D>(elements: [Coordinate3D(tuple: (x: 1.0, y: 1.0, z: 1.0)), Coordinate3D(tuple: (x: 2.0, y: 2.0, z: 2.0))], precision: precision, coordinateSystem: cs).count, 2)
    }

    // MARK: Misc Internal

    func testEnsureUniquelyReferenced() {

        var input = LineString<Coordinate3D>(precision: precision, coordinateSystem: cs)
        let expected = input.capacity * 2

        let copy = input    // This should force the reserveCapacity to clone
        let _ = copy.capacity

        input.reserveCapacity(expected)

        XCTAssertEqual(input.capacity, expected)
    }

    func testResizeIfNeeded() {

        var input = LineString<Coordinate3D>(precision: precision, coordinateSystem: cs)
        let expected = input.capacity * 2

        /// Force it beyond its initial capacity
        for _ in 0..<input.capacity + 1 {
            input.append((x: 1.0, y: 1.0, z: 1.0))
        }
        XCTAssertEqual(input.capacity, expected)
    }
}

// MARK: - Coordinate3DM, FloatingPrecision, Cartesian -

class LineStringCoordinate3DMFloatingPrecisionCartesianTests: XCTestCase {

    let precision = FloatingPrecision()
    let cs        = Cartesian()

    // MARK: Construction

    func testInitWithPrecisionAndCRS() {

        XCTAssertEqual(LineString<Coordinate3DM>(precision: precision, coordinateSystem: cs).isEmpty, true)
    }

    func testInitWithPrecision() {

        XCTAssertEqual(LineString<Coordinate3DM>(precision: precision).precision as? FloatingPrecision, precision)
    }

    func testInitWithCRS() {

        XCTAssertEqual(LineString<Coordinate3DM>(coordinateSystem: cs).coordinateSystem as? Cartesian, cs)
    }

    func testInitWithTuple() {

        let input = LineString<Coordinate3DM>(elements: [(x: 1.0, y: 1.0, z: 1.0, m: 1.0), (x: 2.0, y: 2.0, z: 2.0, m: 2.0)], precision: precision, coordinateSystem: cs)
        let expected = [Coordinate3DM(tuple: (x: 1.0, y: 1.0, z: 1.0, m: 1.0)), Coordinate3DM(tuple: (x: 2.0, y: 2.0, z: 2.0, m: 2.0))]

        XCTAssertTrue(
            (input.elementsEqual(expected) { (lhs: Coordinate3DM, rhs: Coordinate3DM) -> Bool in
                    return lhs == rhs
            }
        ), "\(input) is not equal to \(expected)")
    }

    func testInitCopy() {

        let input = LineString<Coordinate3DM>(other: LineString<Coordinate3DM>(elements: [(x: 1.0, y: 1.0, z: 1.0, m: 1.0), (x: 2.0, y: 2.0, z: 2.0, m: 2.0)]), precision: precision, coordinateSystem: cs)
        let expected = LineString<Coordinate3DM>(elements: [(x: 1.0, y: 1.0, z: 1.0, m: 1.0), (x: 2.0, y: 2.0, z: 2.0, m: 2.0)], precision: precision, coordinateSystem: cs)

        XCTAssertTrue(
            (input.elementsEqual(expected) { (lhs: Coordinate3DM, rhs: Coordinate3DM) -> Bool in
                    return lhs == rhs
            }
        ), "\(input) is not equal to \(expected)")
    }

    // MARK: CustomStringConvertible & CustomDebugStringConvertible

    func testDescription() {

        let input = LineString<Coordinate3DM>(elements: [Coordinate3DM(tuple: (x: 1.0, y: 1.0, z: 1.0, m: 1.0)), Coordinate3DM(tuple: (x: 2.0, y: 2.0, z: 2.0, m: 2.0))], precision: precision, coordinateSystem: cs)
        let expected = "LineString<Coordinate3DM>((x: 1.0, y: 1.0, z: 1.0, m: 1.0), (x: 2.0, y: 2.0, z: 2.0, m: 2.0))"

        XCTAssertEqual(input.description, expected)
    }

    func testDebugDescription() {

        let input = LineString<Coordinate3DM>(elements: [Coordinate3DM(tuple: (x: 1.0, y: 1.0, z: 1.0, m: 1.0)), Coordinate3DM(tuple: (x: 2.0, y: 2.0, z: 2.0, m: 2.0))], precision: precision, coordinateSystem: cs)
        let expected = "LineString<Coordinate3DM>((x: 1.0, y: 1.0, z: 1.0, m: 1.0), (x: 2.0, y: 2.0, z: 2.0, m: 2.0))"

        XCTAssertEqual(input.debugDescription, expected)
    }

    // MARK: Collection conformance

    func testReserveCapacity() {

        var input = LineString<Coordinate3DM>(precision: precision, coordinateSystem: cs)
        let expected = input.capacity * 2

        input.reserveCapacity(expected)

        XCTAssertEqual(input.capacity, expected)
    }

    func testAppend() {

        var input = LineString<Coordinate3DM>(precision: precision, coordinateSystem: cs)
        let expected = [Coordinate3DM(tuple: (x: 1.0, y: 1.0, z: 1.0, m: 1.0))]

        input.append((x: 1.0, y: 1.0, z: 1.0, m: 1.0))

        XCTAssertTrue(input.elementsEqual(expected) { (lhs: Coordinate3DM, rhs: Coordinate3DM) -> Bool in
                return lhs == rhs
        }, "\(input) is not equal to \(expected)")
    }

    func testAppendContentsOf() {

        let input1 = LineString<Coordinate3DM>(elements: [(x: 1.0, y: 1.0, z: 1.0, m: 1.0), (x: 2.0, y: 2.0, z: 2.0, m: 2.0)], precision: precision, coordinateSystem: cs)
        var input2 = LineString<Coordinate3DM>(precision: precision, coordinateSystem: cs)

        input2.append(contentsOf: input1)

        XCTAssertEqual(input1, input2)
    }

    func testAppendContentsOfCoordinates() {

        var input = LineString<Coordinate3DM>(precision: precision, coordinateSystem: cs)
        let expected = [Coordinate3DM(tuple: (x: 1.0, y: 1.0, z: 1.0, m: 1.0)), Coordinate3DM(tuple: (x: 2.0, y: 2.0, z: 2.0, m: 2.0))]

        input.append(contentsOf: expected)

        XCTAssertTrue(input.elementsEqual(expected) { (lhs: Coordinate3DM, rhs: Coordinate3DM) -> Bool in
            return lhs == rhs
        }, "\(input) is not equal to \(expected)")
    }

    func testAppendContentsOfWithTuples() {

        var input = LineString<Coordinate3DM>(precision: precision, coordinateSystem: cs)
        let expected = LineString<Coordinate3DM>(elements: [Coordinate3DM(tuple: (x: 1.0, y: 1.0, z: 1.0, m: 1.0)), Coordinate3DM(tuple: (x: 2.0, y: 2.0, z: 2.0, m: 2.0))], precision: precision, coordinateSystem: cs)

        input.append(contentsOf: [(x: 1.0, y: 1.0, z: 1.0, m: 1.0), (x: 2.0, y: 2.0, z: 2.0, m: 2.0)])

        XCTAssertEqual(input, expected)
    }

    func testInsertCoordinate() {

        var input = LineString<Coordinate3DM>(elements: [Coordinate3DM(tuple: (x: 1.0, y: 1.0, z: 1.0, m: 1.0)), Coordinate3DM(tuple: (x: 2.0, y: 2.0, z: 2.0, m: 2.0))], precision: precision, coordinateSystem: cs)
        let expected = [Coordinate3DM(tuple: (x: 2.0, y: 2.0, z: 2.0, m: 2.0)), Coordinate3DM(tuple: (x: 1.0, y: 1.0, z: 1.0, m: 1.0)), Coordinate3DM(tuple: (x: 2.0, y: 2.0, z: 2.0, m: 2.0))]

        input.insert(Coordinate3DM(tuple: (x: 2.0, y: 2.0, z: 2.0, m: 2.0)), at: 0)

        XCTAssertTrue(input.elementsEqual(expected) { (lhs: Coordinate3DM, rhs: Coordinate3DM) -> Bool in
                return lhs == rhs
            }, "\(input) is not equal to \(expected)")
    }

    func testInsertTuple() {

        var input = LineString<Coordinate3DM>(elements: [Coordinate3DM(tuple: (x: 1.0, y: 1.0, z: 1.0, m: 1.0)), Coordinate3DM(tuple: (x: 2.0, y: 2.0, z: 2.0, m: 2.0))], precision: precision, coordinateSystem: cs)
        let expected = [Coordinate3DM(tuple: (x: 2.0, y: 2.0, z: 2.0, m: 2.0)), Coordinate3DM(tuple: (x: 1.0, y: 1.0, z: 1.0, m: 1.0)), Coordinate3DM(tuple: (x: 2.0, y: 2.0, z: 2.0, m: 2.0))]

        input.insert((x: 2.0, y: 2.0, z: 2.0, m: 2.0), at: 0)

        XCTAssertTrue(input.elementsEqual(expected) { (lhs: Coordinate3DM, rhs: Coordinate3DM) -> Bool in
                return lhs == rhs
            }, "\(input) is not equal to \(expected)")
    }

    func testRemove() {

        var input = LineString<Coordinate3DM>(elements: [Coordinate3DM(tuple: (x: 1.0, y: 1.0, z: 1.0, m: 1.0)), Coordinate3DM(tuple: (x: 2.0, y: 2.0, z: 2.0, m: 2.0))], precision: precision, coordinateSystem: cs)
        let expected = LineString<Coordinate3DM>(elements: [Coordinate3DM(tuple: (x: 2.0, y: 2.0, z: 2.0, m: 2.0))], precision: precision, coordinateSystem: cs)

        let _ = input.remove(at: 0)

        XCTAssertEqual(input, expected)
    }

    func testRemoveLast() {

        var input = LineString<Coordinate3DM>(elements: [Coordinate3DM(tuple: (x: 1.0, y: 1.0, z: 1.0, m: 1.0)), Coordinate3DM(tuple: (x: 2.0, y: 2.0, z: 2.0, m: 2.0))], precision: precision, coordinateSystem: cs)
        let expected = LineString<Coordinate3DM>(elements: [Coordinate3DM(tuple: (x: 1.0, y: 1.0, z: 1.0, m: 1.0))], precision: precision, coordinateSystem: cs)

        let _ = input.removeLast()

        XCTAssertEqual(input, expected)
    }

    func testRemoveAll() {

        var input = LineString<Coordinate3DM>(elements: [Coordinate3DM(tuple: (x: 1.0, y: 1.0, z: 1.0, m: 1.0)), Coordinate3DM(tuple: (x: 2.0, y: 2.0, z: 2.0, m: 2.0))], precision: precision, coordinateSystem: cs)
        let expected = LineString<Coordinate3DM>(precision: precision, coordinateSystem: cs)

        input.removeAll()

        XCTAssertEqual(input, expected)
    }

    func testRemoveAllKeepingCapacity() {

        var input = LineString<Coordinate3DM>(elements: [Coordinate3DM(tuple: (x: 1.0, y: 1.0, z: 1.0, m: 1.0)), Coordinate3DM(tuple: (x: 2.0, y: 2.0, z: 2.0, m: 2.0))], precision: precision, coordinateSystem: cs)
        let expected = input.capacity

        input.removeAll(keepingCapacity: true)

        XCTAssertEqual(input.capacity, expected)
    }

    // MARK: Swift.Collection Conformance

    func testSubscriptGet() {

        let input = LineString<Coordinate3DM>(elements: [(x: 1.0, y: 1.0, z: 1.0, m: 1.0), (x: 2.0, y: 2.0, z: 2.0, m: 2.0)], precision: precision, coordinateSystem: cs)

        XCTAssertEqual(input[1], Coordinate3DM(tuple: (x: 2.0, y: 2.0, z: 2.0, m: 2.0)))
    }

    func testSubscriptSet() {

        var input = LineString<Coordinate3DM>(elements: [(x: 1.0, y: 1.0, z: 1.0, m: 1.0), (x: 2.0, y: 2.0, z: 2.0, m: 2.0)], precision: precision, coordinateSystem: cs)

        input[1] = Coordinate3DM(tuple: (x: 1.0, y: 1.0, z: 1.0, m: 1.0))

        XCTAssertEqual(input[1], Coordinate3DM(tuple: (x: 1.0, y: 1.0, z: 1.0, m: 1.0)))
    }

    func testEquals() {

        XCTAssertEqual(LineString<Coordinate3DM>(elements: [Coordinate3DM(tuple: (x: 1.0, y: 1.0, z: 1.0, m: 1.0)), Coordinate3DM(tuple: (x: 2.0, y: 2.0, z: 2.0, m: 2.0))], precision: precision, coordinateSystem: cs).equals(LineString<Coordinate3DM>(elements: [Coordinate3DM(tuple: (x: 1.0, y: 1.0, z: 1.0, m: 1.0)), Coordinate3DM(tuple: (x: 2.0, y: 2.0, z: 2.0, m: 2.0))], precision: precision, coordinateSystem: cs)), true)
    }

    func testIsEmpty() {

        XCTAssertEqual(LineString<Coordinate3DM>(precision: precision, coordinateSystem: cs).isEmpty(), true)
    }

    func testIsEmptyFalse() {

        XCTAssertEqual(LineString<Coordinate3DM>(elements: [Coordinate3DM(tuple: (x: 1.0, y: 1.0, z: 1.0, m: 1.0)), Coordinate3DM(tuple: (x: 2.0, y: 2.0, z: 2.0, m: 2.0))], precision: precision, coordinateSystem: cs).isEmpty(), false)
    }

    func testCount() {

        XCTAssertEqual(LineString<Coordinate3DM>(elements: [Coordinate3DM(tuple: (x: 1.0, y: 1.0, z: 1.0, m: 1.0)), Coordinate3DM(tuple: (x: 2.0, y: 2.0, z: 2.0, m: 2.0))], precision: precision, coordinateSystem: cs).count, 2)
    }

    // MARK: Misc Internal

    func testEnsureUniquelyReferenced() {

        var input = LineString<Coordinate3DM>(precision: precision, coordinateSystem: cs)
        let expected = input.capacity * 2

        let copy = input    // This should force the reserveCapacity to clone
        let _ = copy.capacity

        input.reserveCapacity(expected)

        XCTAssertEqual(input.capacity, expected)
    }

    func testResizeIfNeeded() {

        var input = LineString<Coordinate3DM>(precision: precision, coordinateSystem: cs)
        let expected = input.capacity * 2

        /// Force it beyond its initial capacity
        for _ in 0..<input.capacity + 1 {
            input.append((x: 1.0, y: 1.0, z: 1.0, m: 1.0))
        }
        XCTAssertEqual(input.capacity, expected)
    }
}

// MARK: - Coordinate2D, FixedPrecision, Cartesian -

class LineStringCoordinate2DFixedPrecisionCartesianTests: XCTestCase {

    let precision = FixedPrecision(scale: 100)
    let cs        = Cartesian()

    // MARK: Construction

    func testInitWithPrecisionAndCRS() {

        XCTAssertEqual(LineString<Coordinate2D>(precision: precision, coordinateSystem: cs).isEmpty, true)
    }

    func testInitWithPrecision() {

        XCTAssertEqual(LineString<Coordinate2D>(precision: precision).precision as? FixedPrecision, precision)
    }

    func testInitWithCRS() {

        XCTAssertEqual(LineString<Coordinate2D>(coordinateSystem: cs).coordinateSystem as? Cartesian, cs)
    }

    func testInitWithTuple() {

        let input = LineString<Coordinate2D>(elements: [(x: 1.001, y: 1.001), (x: 2.002, y: 2.002)], precision: precision, coordinateSystem: cs)
        let expected = [Coordinate2D(tuple: (x: 1.0, y: 1.0)), Coordinate2D(tuple: (x: 2.0, y: 2.0))]

        XCTAssertTrue(
            (input.elementsEqual(expected) { (lhs: Coordinate2D, rhs: Coordinate2D) -> Bool in
                    return lhs == rhs
            }
        ), "\(input) is not equal to \(expected)")
    }

    func testInitCopy() {

        let input = LineString<Coordinate2D>(other: LineString<Coordinate2D>(elements: [(x: 1.001, y: 1.001), (x: 2.002, y: 2.002)]), precision: precision, coordinateSystem: cs)
        let expected = LineString<Coordinate2D>(elements: [(x: 1.0, y: 1.0), (x: 2.0, y: 2.0)], precision: precision, coordinateSystem: cs)

        XCTAssertTrue(
            (input.elementsEqual(expected) { (lhs: Coordinate2D, rhs: Coordinate2D) -> Bool in
                    return lhs == rhs
            }
        ), "\(input) is not equal to \(expected)")
    }

    // MARK: CustomStringConvertible & CustomDebugStringConvertible

    func testDescription() {

        let input = LineString<Coordinate2D>(elements: [Coordinate2D(tuple: (x: 1.001, y: 1.001)), Coordinate2D(tuple: (x: 2.002, y: 2.002))], precision: precision, coordinateSystem: cs)
        let expected = "LineString<Coordinate2D>((x: 1.0, y: 1.0), (x: 2.0, y: 2.0))"

        XCTAssertEqual(input.description, expected)
    }

    func testDebugDescription() {

        let input = LineString<Coordinate2D>(elements: [Coordinate2D(tuple: (x: 1.001, y: 1.001)), Coordinate2D(tuple: (x: 2.002, y: 2.002))], precision: precision, coordinateSystem: cs)
        let expected = "LineString<Coordinate2D>((x: 1.0, y: 1.0), (x: 2.0, y: 2.0))"

        XCTAssertEqual(input.debugDescription, expected)
    }

    // MARK: Collection conformance

    func testReserveCapacity() {

        var input = LineString<Coordinate2D>(precision: precision, coordinateSystem: cs)
        let expected = input.capacity * 2

        input.reserveCapacity(expected)

        XCTAssertEqual(input.capacity, expected)
    }

    func testAppend() {

        var input = LineString<Coordinate2D>(precision: precision, coordinateSystem: cs)
        let expected = [Coordinate2D(tuple: (x: 1.0, y: 1.0))]

        input.append((x: 1.001, y: 1.001))

        XCTAssertTrue(input.elementsEqual(expected) { (lhs: Coordinate2D, rhs: Coordinate2D) -> Bool in
                return lhs == rhs
        }, "\(input) is not equal to \(expected)")
    }

    func testAppendContentsOf() {

        let input1 = LineString<Coordinate2D>(elements: [(x: 1.001, y: 1.001), (x: 2.002, y: 2.002)], precision: precision, coordinateSystem: cs)
        var input2 = LineString<Coordinate2D>(precision: precision, coordinateSystem: cs)

        input2.append(contentsOf: input1)

        XCTAssertEqual(input1, input2)
    }

    func testAppendContentsOfCoordinates() {

        var input = LineString<Coordinate2D>(precision: precision, coordinateSystem: cs)
        let expected = [Coordinate2D(tuple: (x: 1.0, y: 1.0)), Coordinate2D(tuple: (x: 2.0, y: 2.0))]

        input.append(contentsOf: expected)

        XCTAssertTrue(input.elementsEqual(expected) { (lhs: Coordinate2D, rhs: Coordinate2D) -> Bool in
            return lhs == rhs
        }, "\(input) is not equal to \(expected)")
    }

    func testAppendContentsOfWithTuples() {

        var input = LineString<Coordinate2D>(precision: precision, coordinateSystem: cs)
        let expected = LineString<Coordinate2D>(elements: [Coordinate2D(tuple: (x: 1.0, y: 1.0)), Coordinate2D(tuple: (x: 2.0, y: 2.0))], precision: precision, coordinateSystem: cs)

        input.append(contentsOf: [(x: 1.0, y: 1.0), (x: 2.0, y: 2.0)])

        XCTAssertEqual(input, expected)
    }

    func testInsertCoordinate() {

        var input = LineString<Coordinate2D>(elements: [Coordinate2D(tuple: (x: 1.001, y: 1.001)), Coordinate2D(tuple: (x: 2.002, y: 2.002))], precision: precision, coordinateSystem: cs)
        let expected = [Coordinate2D(tuple: (x: 2.0, y: 2.0)), Coordinate2D(tuple: (x: 1.0, y: 1.0)), Coordinate2D(tuple: (x: 2.0, y: 2.0))]

        input.insert(Coordinate2D(tuple: (x: 2.002, y: 2.002)), at: 0)

        XCTAssertTrue(input.elementsEqual(expected) { (lhs: Coordinate2D, rhs: Coordinate2D) -> Bool in
                return lhs == rhs
            }, "\(input) is not equal to \(expected)")
    }

    func testInsertTuple() {

        var input = LineString<Coordinate2D>(elements: [Coordinate2D(tuple: (x: 1.001, y: 1.001)), Coordinate2D(tuple: (x: 2.002, y: 2.002))], precision: precision, coordinateSystem: cs)
        let expected = [Coordinate2D(tuple: (x: 2.0, y: 2.0)), Coordinate2D(tuple: (x: 1.0, y: 1.0)), Coordinate2D(tuple: (x: 2.0, y: 2.0))]

        input.insert((x: 2.002, y: 2.002), at: 0)

        XCTAssertTrue(input.elementsEqual(expected) { (lhs: Coordinate2D, rhs: Coordinate2D) -> Bool in
                return lhs == rhs
            }, "\(input) is not equal to \(expected)")
    }

    func testRemove() {

        var input = LineString<Coordinate2D>(elements: [Coordinate2D(tuple: (x: 1.001, y: 1.001)), Coordinate2D(tuple: (x: 2.002, y: 2.002))], precision: precision, coordinateSystem: cs)
        let expected = LineString<Coordinate2D>(elements: [Coordinate2D(tuple: (x: 2.0, y: 2.0))], precision: precision, coordinateSystem: cs)

        let _ = input.remove(at: 0)

        XCTAssertEqual(input, expected)
    }

    func testRemoveLast() {

        var input = LineString<Coordinate2D>(elements: [Coordinate2D(tuple: (x: 1.001, y: 1.001)), Coordinate2D(tuple: (x: 2.002, y: 2.002))], precision: precision, coordinateSystem: cs)
        let expected = LineString<Coordinate2D>(elements: [Coordinate2D(tuple: (x: 1.0, y: 1.0))], precision: precision, coordinateSystem: cs)

        let _ = input.removeLast()

        XCTAssertEqual(input, expected)
    }

    func testRemoveAll() {

        var input = LineString<Coordinate2D>(elements: [Coordinate2D(tuple: (x: 1.001, y: 1.001)), Coordinate2D(tuple: (x: 2.002, y: 2.002))], precision: precision, coordinateSystem: cs)
        let expected = LineString<Coordinate2D>(precision: precision, coordinateSystem: cs)

        input.removeAll()

        XCTAssertEqual(input, expected)
    }

    func testRemoveAllKeepingCapacity() {

        var input = LineString<Coordinate2D>(elements: [Coordinate2D(tuple: (x: 1.001, y: 1.001)), Coordinate2D(tuple: (x: 2.002, y: 2.002))], precision: precision, coordinateSystem: cs)
        let expected = input.capacity

        input.removeAll(keepingCapacity: true)

        XCTAssertEqual(input.capacity, expected)
    }

    // MARK: Swift.Collection Conformance

    func testSubscriptGet() {

        let input = LineString<Coordinate2D>(elements: [(x: 1.001, y: 1.001), (x: 2.002, y: 2.002)], precision: precision, coordinateSystem: cs)

        XCTAssertEqual(input[1], Coordinate2D(tuple: (x: 2.0, y: 2.0)))
    }

    func testSubscriptSet() {

        var input = LineString<Coordinate2D>(elements: [(x: 1.001, y: 1.001), (x: 2.002, y: 2.002)], precision: precision, coordinateSystem: cs)

        input[1] = Coordinate2D(tuple: (x: 1.001, y: 1.001))

        XCTAssertEqual(input[1], Coordinate2D(tuple: (x: 1.0, y: 1.0)))
    }

    func testEquals() {

        XCTAssertEqual(LineString<Coordinate2D>(elements: [Coordinate2D(tuple: (x: 1.001, y: 1.001)), Coordinate2D(tuple: (x: 2.002, y: 2.002))], precision: precision, coordinateSystem: cs).equals(LineString<Coordinate2D>(elements: [Coordinate2D(tuple: (x: 1.0, y: 1.0)), Coordinate2D(tuple: (x: 2.0, y: 2.0))], precision: precision, coordinateSystem: cs)), true)
    }

    func testIsEmpty() {

        XCTAssertEqual(LineString<Coordinate2D>(precision: precision, coordinateSystem: cs).isEmpty(), true)
    }

    func testIsEmptyFalse() {

        XCTAssertEqual(LineString<Coordinate2D>(elements: [Coordinate2D(tuple: (x: 1.001, y: 1.001)), Coordinate2D(tuple: (x: 2.002, y: 2.002))], precision: precision, coordinateSystem: cs).isEmpty(), false)
    }

    func testCount() {

        XCTAssertEqual(LineString<Coordinate2D>(elements: [Coordinate2D(tuple: (x: 1.001, y: 1.001)), Coordinate2D(tuple: (x: 2.002, y: 2.002))], precision: precision, coordinateSystem: cs).count, 2)
    }

    // MARK: Misc Internal

    func testEnsureUniquelyReferenced() {

        var input = LineString<Coordinate2D>(precision: precision, coordinateSystem: cs)
        let expected = input.capacity * 2

        let copy = input    // This should force the reserveCapacity to clone
        let _ = copy.capacity

        input.reserveCapacity(expected)

        XCTAssertEqual(input.capacity, expected)
    }

    func testResizeIfNeeded() {

        var input = LineString<Coordinate2D>(precision: precision, coordinateSystem: cs)
        let expected = input.capacity * 2

        /// Force it beyond its initial capacity
        for _ in 0..<input.capacity + 1 {
            input.append((x: 1.001, y: 1.001))
        }
        XCTAssertEqual(input.capacity, expected)
    }
}

// MARK: - Coordinate2DM, FixedPrecision, Cartesian -

class LineStringCoordinate2DMFixedPrecisionCartesianTests: XCTestCase {

    let precision = FixedPrecision(scale: 100)
    let cs        = Cartesian()

    // MARK: Construction

    func testInitWithPrecisionAndCRS() {

        XCTAssertEqual(LineString<Coordinate2DM>(precision: precision, coordinateSystem: cs).isEmpty, true)
    }

    func testInitWithPrecision() {

        XCTAssertEqual(LineString<Coordinate2DM>(precision: precision).precision as? FixedPrecision, precision)
    }

    func testInitWithCRS() {

        XCTAssertEqual(LineString<Coordinate2DM>(coordinateSystem: cs).coordinateSystem as? Cartesian, cs)
    }

    func testInitWithTuple() {

        let input = LineString<Coordinate2DM>(elements: [(x: 1.001, y: 1.001, m: 1.001), (x: 2.002, y: 2.002, m: 2.002)], precision: precision, coordinateSystem: cs)
        let expected = [Coordinate2DM(tuple: (x: 1.0, y: 1.0, m: 1.0)), Coordinate2DM(tuple: (x: 2.0, y: 2.0, m: 2.0))]

        XCTAssertTrue(
            (input.elementsEqual(expected) { (lhs: Coordinate2DM, rhs: Coordinate2DM) -> Bool in
                    return lhs == rhs
            }
        ), "\(input) is not equal to \(expected)")
    }

    func testInitCopy() {

        let input = LineString<Coordinate2DM>(other: LineString<Coordinate2DM>(elements: [(x: 1.001, y: 1.001, m: 1.001), (x: 2.002, y: 2.002, m: 2.002)]), precision: precision, coordinateSystem: cs)
        let expected = LineString<Coordinate2DM>(elements: [(x: 1.0, y: 1.0, m: 1.0), (x: 2.0, y: 2.0, m: 2.0)], precision: precision, coordinateSystem: cs)

        XCTAssertTrue(
            (input.elementsEqual(expected) { (lhs: Coordinate2DM, rhs: Coordinate2DM) -> Bool in
                    return lhs == rhs
            }
        ), "\(input) is not equal to \(expected)")
    }

    // MARK: CustomStringConvertible & CustomDebugStringConvertible

    func testDescription() {

        let input = LineString<Coordinate2DM>(elements: [Coordinate2DM(tuple: (x: 1.001, y: 1.001, m: 1.001)), Coordinate2DM(tuple: (x: 2.002, y: 2.002, m: 2.002))], precision: precision, coordinateSystem: cs)
        let expected = "LineString<Coordinate2DM>((x: 1.0, y: 1.0, m: 1.0), (x: 2.0, y: 2.0, m: 2.0))"

        XCTAssertEqual(input.description, expected)
    }

    func testDebugDescription() {

        let input = LineString<Coordinate2DM>(elements: [Coordinate2DM(tuple: (x: 1.001, y: 1.001, m: 1.001)), Coordinate2DM(tuple: (x: 2.002, y: 2.002, m: 2.002))], precision: precision, coordinateSystem: cs)
        let expected = "LineString<Coordinate2DM>((x: 1.0, y: 1.0, m: 1.0), (x: 2.0, y: 2.0, m: 2.0))"

        XCTAssertEqual(input.debugDescription, expected)
    }

    // MARK: Collection conformance

    func testReserveCapacity() {

        var input = LineString<Coordinate2DM>(precision: precision, coordinateSystem: cs)
        let expected = input.capacity * 2

        input.reserveCapacity(expected)

        XCTAssertEqual(input.capacity, expected)
    }

    func testAppend() {

        var input = LineString<Coordinate2DM>(precision: precision, coordinateSystem: cs)
        let expected = [Coordinate2DM(tuple: (x: 1.0, y: 1.0, m: 1.0))]

        input.append((x: 1.001, y: 1.001, m: 1.001))

        XCTAssertTrue(input.elementsEqual(expected) { (lhs: Coordinate2DM, rhs: Coordinate2DM) -> Bool in
                return lhs == rhs
        }, "\(input) is not equal to \(expected)")
    }

    func testAppendContentsOf() {

        let input1 = LineString<Coordinate2DM>(elements: [(x: 1.001, y: 1.001, m: 1.001), (x: 2.002, y: 2.002, m: 2.002)], precision: precision, coordinateSystem: cs)
        var input2 = LineString<Coordinate2DM>(precision: precision, coordinateSystem: cs)

        input2.append(contentsOf: input1)

        XCTAssertEqual(input1, input2)
    }

    func testAppendContentsOfCoordinates() {

        var input = LineString<Coordinate2DM>(precision: precision, coordinateSystem: cs)
        let expected = [Coordinate2DM(tuple: (x: 1.0, y: 1.0, m: 1.0)), Coordinate2DM(tuple: (x: 2.0, y: 2.0, m: 2.0))]

        input.append(contentsOf: expected)

        XCTAssertTrue(input.elementsEqual(expected) { (lhs: Coordinate2DM, rhs: Coordinate2DM) -> Bool in
            return lhs == rhs
        }, "\(input) is not equal to \(expected)")
    }

    func testAppendContentsOfWithTuples() {

        var input = LineString<Coordinate2DM>(precision: precision, coordinateSystem: cs)
        let expected = LineString<Coordinate2DM>(elements: [Coordinate2DM(tuple: (x: 1.0, y: 1.0, m: 1.0)), Coordinate2DM(tuple: (x: 2.0, y: 2.0, m: 2.0))], precision: precision, coordinateSystem: cs)

        input.append(contentsOf: [(x: 1.0, y: 1.0, m: 1.0), (x: 2.0, y: 2.0, m: 2.0)])

        XCTAssertEqual(input, expected)
    }

    func testInsertCoordinate() {

        var input = LineString<Coordinate2DM>(elements: [Coordinate2DM(tuple: (x: 1.001, y: 1.001, m: 1.001)), Coordinate2DM(tuple: (x: 2.002, y: 2.002, m: 2.002))], precision: precision, coordinateSystem: cs)
        let expected = [Coordinate2DM(tuple: (x: 2.0, y: 2.0, m: 2.0)), Coordinate2DM(tuple: (x: 1.0, y: 1.0, m: 1.0)), Coordinate2DM(tuple: (x: 2.0, y: 2.0, m: 2.0))]

        input.insert(Coordinate2DM(tuple: (x: 2.002, y: 2.002, m: 2.002)), at: 0)

        XCTAssertTrue(input.elementsEqual(expected) { (lhs: Coordinate2DM, rhs: Coordinate2DM) -> Bool in
                return lhs == rhs
            }, "\(input) is not equal to \(expected)")
    }

    func testInsertTuple() {

        var input = LineString<Coordinate2DM>(elements: [Coordinate2DM(tuple: (x: 1.001, y: 1.001, m: 1.001)), Coordinate2DM(tuple: (x: 2.002, y: 2.002, m: 2.002))], precision: precision, coordinateSystem: cs)
        let expected = [Coordinate2DM(tuple: (x: 2.0, y: 2.0, m: 2.0)), Coordinate2DM(tuple: (x: 1.0, y: 1.0, m: 1.0)), Coordinate2DM(tuple: (x: 2.0, y: 2.0, m: 2.0))]

        input.insert((x: 2.002, y: 2.002, m: 2.002), at: 0)

        XCTAssertTrue(input.elementsEqual(expected) { (lhs: Coordinate2DM, rhs: Coordinate2DM) -> Bool in
                return lhs == rhs
            }, "\(input) is not equal to \(expected)")
    }

    func testRemove() {

        var input = LineString<Coordinate2DM>(elements: [Coordinate2DM(tuple: (x: 1.001, y: 1.001, m: 1.001)), Coordinate2DM(tuple: (x: 2.002, y: 2.002, m: 2.002))], precision: precision, coordinateSystem: cs)
        let expected = LineString<Coordinate2DM>(elements: [Coordinate2DM(tuple: (x: 2.0, y: 2.0, m: 2.0))], precision: precision, coordinateSystem: cs)

        let _ = input.remove(at: 0)

        XCTAssertEqual(input, expected)
    }

    func testRemoveLast() {

        var input = LineString<Coordinate2DM>(elements: [Coordinate2DM(tuple: (x: 1.001, y: 1.001, m: 1.001)), Coordinate2DM(tuple: (x: 2.002, y: 2.002, m: 2.002))], precision: precision, coordinateSystem: cs)
        let expected = LineString<Coordinate2DM>(elements: [Coordinate2DM(tuple: (x: 1.0, y: 1.0, m: 1.0))], precision: precision, coordinateSystem: cs)

        let _ = input.removeLast()

        XCTAssertEqual(input, expected)
    }

    func testRemoveAll() {

        var input = LineString<Coordinate2DM>(elements: [Coordinate2DM(tuple: (x: 1.001, y: 1.001, m: 1.001)), Coordinate2DM(tuple: (x: 2.002, y: 2.002, m: 2.002))], precision: precision, coordinateSystem: cs)
        let expected = LineString<Coordinate2DM>(precision: precision, coordinateSystem: cs)

        input.removeAll()

        XCTAssertEqual(input, expected)
    }

    func testRemoveAllKeepingCapacity() {

        var input = LineString<Coordinate2DM>(elements: [Coordinate2DM(tuple: (x: 1.001, y: 1.001, m: 1.001)), Coordinate2DM(tuple: (x: 2.002, y: 2.002, m: 2.002))], precision: precision, coordinateSystem: cs)
        let expected = input.capacity

        input.removeAll(keepingCapacity: true)

        XCTAssertEqual(input.capacity, expected)
    }

    // MARK: Swift.Collection Conformance

    func testSubscriptGet() {

        let input = LineString<Coordinate2DM>(elements: [(x: 1.001, y: 1.001, m: 1.001), (x: 2.002, y: 2.002, m: 2.002)], precision: precision, coordinateSystem: cs)

        XCTAssertEqual(input[1], Coordinate2DM(tuple: (x: 2.0, y: 2.0, m: 2.0)))
    }

    func testSubscriptSet() {

        var input = LineString<Coordinate2DM>(elements: [(x: 1.001, y: 1.001, m: 1.001), (x: 2.002, y: 2.002, m: 2.002)], precision: precision, coordinateSystem: cs)

        input[1] = Coordinate2DM(tuple: (x: 1.001, y: 1.001, m: 1.001))

        XCTAssertEqual(input[1], Coordinate2DM(tuple: (x: 1.0, y: 1.0, m: 1.0)))
    }

    func testEquals() {

        XCTAssertEqual(LineString<Coordinate2DM>(elements: [Coordinate2DM(tuple: (x: 1.001, y: 1.001, m: 1.001)), Coordinate2DM(tuple: (x: 2.002, y: 2.002, m: 2.002))], precision: precision, coordinateSystem: cs).equals(LineString<Coordinate2DM>(elements: [Coordinate2DM(tuple: (x: 1.0, y: 1.0, m: 1.0)), Coordinate2DM(tuple: (x: 2.0, y: 2.0, m: 2.0))], precision: precision, coordinateSystem: cs)), true)
    }

    func testIsEmpty() {

        XCTAssertEqual(LineString<Coordinate2DM>(precision: precision, coordinateSystem: cs).isEmpty(), true)
    }

    func testIsEmptyFalse() {

        XCTAssertEqual(LineString<Coordinate2DM>(elements: [Coordinate2DM(tuple: (x: 1.001, y: 1.001, m: 1.001)), Coordinate2DM(tuple: (x: 2.002, y: 2.002, m: 2.002))], precision: precision, coordinateSystem: cs).isEmpty(), false)
    }

    func testCount() {

        XCTAssertEqual(LineString<Coordinate2DM>(elements: [Coordinate2DM(tuple: (x: 1.001, y: 1.001, m: 1.001)), Coordinate2DM(tuple: (x: 2.002, y: 2.002, m: 2.002))], precision: precision, coordinateSystem: cs).count, 2)
    }

    // MARK: Misc Internal

    func testEnsureUniquelyReferenced() {

        var input = LineString<Coordinate2DM>(precision: precision, coordinateSystem: cs)
        let expected = input.capacity * 2

        let copy = input    // This should force the reserveCapacity to clone
        let _ = copy.capacity

        input.reserveCapacity(expected)

        XCTAssertEqual(input.capacity, expected)
    }

    func testResizeIfNeeded() {

        var input = LineString<Coordinate2DM>(precision: precision, coordinateSystem: cs)
        let expected = input.capacity * 2

        /// Force it beyond its initial capacity
        for _ in 0..<input.capacity + 1 {
            input.append((x: 1.001, y: 1.001, m: 1.001))
        }
        XCTAssertEqual(input.capacity, expected)
    }
}

// MARK: - Coordinate3D, FixedPrecision, Cartesian -

class LineStringCoordinate3DFixedPrecisionCartesianTests: XCTestCase {

    let precision = FixedPrecision(scale: 100)
    let cs        = Cartesian()

    // MARK: Construction

    func testInitWithPrecisionAndCRS() {

        XCTAssertEqual(LineString<Coordinate3D>(precision: precision, coordinateSystem: cs).isEmpty, true)
    }

    func testInitWithPrecision() {

        XCTAssertEqual(LineString<Coordinate3D>(precision: precision).precision as? FixedPrecision, precision)
    }

    func testInitWithCRS() {

        XCTAssertEqual(LineString<Coordinate3D>(coordinateSystem: cs).coordinateSystem as? Cartesian, cs)
    }

    func testInitWithTuple() {

        let input = LineString<Coordinate3D>(elements: [(x: 1.001, y: 1.001, z: 1.001), (x: 2.002, y: 2.002, z: 2.002)], precision: precision, coordinateSystem: cs)
        let expected = [Coordinate3D(tuple: (x: 1.0, y: 1.0, z: 1.0)), Coordinate3D(tuple: (x: 2.0, y: 2.0, z: 2.0))]

        XCTAssertTrue(
            (input.elementsEqual(expected) { (lhs: Coordinate3D, rhs: Coordinate3D) -> Bool in
                    return lhs == rhs
            }
        ), "\(input) is not equal to \(expected)")
    }

    func testInitCopy() {

        let input = LineString<Coordinate3D>(other: LineString<Coordinate3D>(elements: [(x: 1.001, y: 1.001, z: 1.001), (x: 2.002, y: 2.002, z: 2.002)]), precision: precision, coordinateSystem: cs)
        let expected = LineString<Coordinate3D>(elements: [(x: 1.0, y: 1.0, z: 1.0), (x: 2.0, y: 2.0, z: 2.0)], precision: precision, coordinateSystem: cs)

        XCTAssertTrue(
            (input.elementsEqual(expected) { (lhs: Coordinate3D, rhs: Coordinate3D) -> Bool in
                    return lhs == rhs
            }
        ), "\(input) is not equal to \(expected)")
    }

    // MARK: CustomStringConvertible & CustomDebugStringConvertible

    func testDescription() {

        let input = LineString<Coordinate3D>(elements: [Coordinate3D(tuple: (x: 1.001, y: 1.001, z: 1.001)), Coordinate3D(tuple: (x: 2.002, y: 2.002, z: 2.002))], precision: precision, coordinateSystem: cs)
        let expected = "LineString<Coordinate3D>((x: 1.0, y: 1.0, z: 1.0), (x: 2.0, y: 2.0, z: 2.0))"

        XCTAssertEqual(input.description, expected)
    }

    func testDebugDescription() {

        let input = LineString<Coordinate3D>(elements: [Coordinate3D(tuple: (x: 1.001, y: 1.001, z: 1.001)), Coordinate3D(tuple: (x: 2.002, y: 2.002, z: 2.002))], precision: precision, coordinateSystem: cs)
        let expected = "LineString<Coordinate3D>((x: 1.0, y: 1.0, z: 1.0), (x: 2.0, y: 2.0, z: 2.0))"

        XCTAssertEqual(input.debugDescription, expected)
    }

    // MARK: Collection conformance

    func testReserveCapacity() {

        var input = LineString<Coordinate3D>(precision: precision, coordinateSystem: cs)
        let expected = input.capacity * 2

        input.reserveCapacity(expected)

        XCTAssertEqual(input.capacity, expected)
    }

    func testAppend() {

        var input = LineString<Coordinate3D>(precision: precision, coordinateSystem: cs)
        let expected = [Coordinate3D(tuple: (x: 1.0, y: 1.0, z: 1.0))]

        input.append((x: 1.001, y: 1.001, z: 1.001))

        XCTAssertTrue(input.elementsEqual(expected) { (lhs: Coordinate3D, rhs: Coordinate3D) -> Bool in
                return lhs == rhs
        }, "\(input) is not equal to \(expected)")
    }

    func testAppendContentsOf() {

        let input1 = LineString<Coordinate3D>(elements: [(x: 1.001, y: 1.001, z: 1.001), (x: 2.002, y: 2.002, z: 2.002)], precision: precision, coordinateSystem: cs)
        var input2 = LineString<Coordinate3D>(precision: precision, coordinateSystem: cs)

        input2.append(contentsOf: input1)

        XCTAssertEqual(input1, input2)
    }

    func testAppendContentsOfCoordinates() {

        var input = LineString<Coordinate3D>(precision: precision, coordinateSystem: cs)
        let expected = [Coordinate3D(tuple: (x: 1.0, y: 1.0, z: 1.0)), Coordinate3D(tuple: (x: 2.0, y: 2.0, z: 2.0))]

        input.append(contentsOf: expected)

        XCTAssertTrue(input.elementsEqual(expected) { (lhs: Coordinate3D, rhs: Coordinate3D) -> Bool in
            return lhs == rhs
        }, "\(input) is not equal to \(expected)")
    }

    func testAppendContentsOfWithTuples() {

        var input = LineString<Coordinate3D>(precision: precision, coordinateSystem: cs)
        let expected = LineString<Coordinate3D>(elements: [Coordinate3D(tuple: (x: 1.0, y: 1.0, z: 1.0)), Coordinate3D(tuple: (x: 2.0, y: 2.0, z: 2.0))], precision: precision, coordinateSystem: cs)

        input.append(contentsOf: [(x: 1.0, y: 1.0, z: 1.0), (x: 2.0, y: 2.0, z: 2.0)])

        XCTAssertEqual(input, expected)
    }

    func testInsertCoordinate() {

        var input = LineString<Coordinate3D>(elements: [Coordinate3D(tuple: (x: 1.001, y: 1.001, z: 1.001)), Coordinate3D(tuple: (x: 2.002, y: 2.002, z: 2.002))], precision: precision, coordinateSystem: cs)
        let expected = [Coordinate3D(tuple: (x: 2.0, y: 2.0, z: 2.0)), Coordinate3D(tuple: (x: 1.0, y: 1.0, z: 1.0)), Coordinate3D(tuple: (x: 2.0, y: 2.0, z: 2.0))]

        input.insert(Coordinate3D(tuple: (x: 2.002, y: 2.002, z: 2.002)), at: 0)

        XCTAssertTrue(input.elementsEqual(expected) { (lhs: Coordinate3D, rhs: Coordinate3D) -> Bool in
                return lhs == rhs
            }, "\(input) is not equal to \(expected)")
    }

    func testInsertTuple() {

        var input = LineString<Coordinate3D>(elements: [Coordinate3D(tuple: (x: 1.001, y: 1.001, z: 1.001)), Coordinate3D(tuple: (x: 2.002, y: 2.002, z: 2.002))], precision: precision, coordinateSystem: cs)
        let expected = [Coordinate3D(tuple: (x: 2.0, y: 2.0, z: 2.0)), Coordinate3D(tuple: (x: 1.0, y: 1.0, z: 1.0)), Coordinate3D(tuple: (x: 2.0, y: 2.0, z: 2.0))]

        input.insert((x: 2.002, y: 2.002, z: 2.002), at: 0)

        XCTAssertTrue(input.elementsEqual(expected) { (lhs: Coordinate3D, rhs: Coordinate3D) -> Bool in
                return lhs == rhs
            }, "\(input) is not equal to \(expected)")
    }

    func testRemove() {

        var input = LineString<Coordinate3D>(elements: [Coordinate3D(tuple: (x: 1.001, y: 1.001, z: 1.001)), Coordinate3D(tuple: (x: 2.002, y: 2.002, z: 2.002))], precision: precision, coordinateSystem: cs)
        let expected = LineString<Coordinate3D>(elements: [Coordinate3D(tuple: (x: 2.0, y: 2.0, z: 2.0))], precision: precision, coordinateSystem: cs)

        let _ = input.remove(at: 0)

        XCTAssertEqual(input, expected)
    }

    func testRemoveLast() {

        var input = LineString<Coordinate3D>(elements: [Coordinate3D(tuple: (x: 1.001, y: 1.001, z: 1.001)), Coordinate3D(tuple: (x: 2.002, y: 2.002, z: 2.002))], precision: precision, coordinateSystem: cs)
        let expected = LineString<Coordinate3D>(elements: [Coordinate3D(tuple: (x: 1.0, y: 1.0, z: 1.0))], precision: precision, coordinateSystem: cs)

        let _ = input.removeLast()

        XCTAssertEqual(input, expected)
    }

    func testRemoveAll() {

        var input = LineString<Coordinate3D>(elements: [Coordinate3D(tuple: (x: 1.001, y: 1.001, z: 1.001)), Coordinate3D(tuple: (x: 2.002, y: 2.002, z: 2.002))], precision: precision, coordinateSystem: cs)
        let expected = LineString<Coordinate3D>(precision: precision, coordinateSystem: cs)

        input.removeAll()

        XCTAssertEqual(input, expected)
    }

    func testRemoveAllKeepingCapacity() {

        var input = LineString<Coordinate3D>(elements: [Coordinate3D(tuple: (x: 1.001, y: 1.001, z: 1.001)), Coordinate3D(tuple: (x: 2.002, y: 2.002, z: 2.002))], precision: precision, coordinateSystem: cs)
        let expected = input.capacity

        input.removeAll(keepingCapacity: true)

        XCTAssertEqual(input.capacity, expected)
    }

    // MARK: Swift.Collection Conformance

    func testSubscriptGet() {

        let input = LineString<Coordinate3D>(elements: [(x: 1.001, y: 1.001, z: 1.001), (x: 2.002, y: 2.002, z: 2.002)], precision: precision, coordinateSystem: cs)

        XCTAssertEqual(input[1], Coordinate3D(tuple: (x: 2.0, y: 2.0, z: 2.0)))
    }

    func testSubscriptSet() {

        var input = LineString<Coordinate3D>(elements: [(x: 1.001, y: 1.001, z: 1.001), (x: 2.002, y: 2.002, z: 2.002)], precision: precision, coordinateSystem: cs)

        input[1] = Coordinate3D(tuple: (x: 1.001, y: 1.001, z: 1.001))

        XCTAssertEqual(input[1], Coordinate3D(tuple: (x: 1.0, y: 1.0, z: 1.0)))
    }

    func testEquals() {

        XCTAssertEqual(LineString<Coordinate3D>(elements: [Coordinate3D(tuple: (x: 1.001, y: 1.001, z: 1.001)), Coordinate3D(tuple: (x: 2.002, y: 2.002, z: 2.002))], precision: precision, coordinateSystem: cs).equals(LineString<Coordinate3D>(elements: [Coordinate3D(tuple: (x: 1.0, y: 1.0, z: 1.0)), Coordinate3D(tuple: (x: 2.0, y: 2.0, z: 2.0))], precision: precision, coordinateSystem: cs)), true)
    }

    func testIsEmpty() {

        XCTAssertEqual(LineString<Coordinate3D>(precision: precision, coordinateSystem: cs).isEmpty(), true)
    }

    func testIsEmptyFalse() {

        XCTAssertEqual(LineString<Coordinate3D>(elements: [Coordinate3D(tuple: (x: 1.001, y: 1.001, z: 1.001)), Coordinate3D(tuple: (x: 2.002, y: 2.002, z: 2.002))], precision: precision, coordinateSystem: cs).isEmpty(), false)
    }

    func testCount() {

        XCTAssertEqual(LineString<Coordinate3D>(elements: [Coordinate3D(tuple: (x: 1.001, y: 1.001, z: 1.001)), Coordinate3D(tuple: (x: 2.002, y: 2.002, z: 2.002))], precision: precision, coordinateSystem: cs).count, 2)
    }

    // MARK: Misc Internal

    func testEnsureUniquelyReferenced() {

        var input = LineString<Coordinate3D>(precision: precision, coordinateSystem: cs)
        let expected = input.capacity * 2

        let copy = input    // This should force the reserveCapacity to clone
        let _ = copy.capacity

        input.reserveCapacity(expected)

        XCTAssertEqual(input.capacity, expected)
    }

    func testResizeIfNeeded() {

        var input = LineString<Coordinate3D>(precision: precision, coordinateSystem: cs)
        let expected = input.capacity * 2

        /// Force it beyond its initial capacity
        for _ in 0..<input.capacity + 1 {
            input.append((x: 1.001, y: 1.001, z: 1.001))
        }
        XCTAssertEqual(input.capacity, expected)
    }
}

// MARK: - Coordinate3DM, FixedPrecision, Cartesian -

class LineStringCoordinate3DMFixedPrecisionCartesianTests: XCTestCase {

    let precision = FixedPrecision(scale: 100)
    let cs        = Cartesian()

    // MARK: Construction

    func testInitWithPrecisionAndCRS() {

        XCTAssertEqual(LineString<Coordinate3DM>(precision: precision, coordinateSystem: cs).isEmpty, true)
    }

    func testInitWithPrecision() {

        XCTAssertEqual(LineString<Coordinate3DM>(precision: precision).precision as? FixedPrecision, precision)
    }

    func testInitWithCRS() {

        XCTAssertEqual(LineString<Coordinate3DM>(coordinateSystem: cs).coordinateSystem as? Cartesian, cs)
    }

    func testInitWithTuple() {

        let input = LineString<Coordinate3DM>(elements: [(x: 1.001, y: 1.001, z: 1.001, m: 1.001), (x: 2.002, y: 2.002, z: 2.002, m: 2.002)], precision: precision, coordinateSystem: cs)
        let expected = [Coordinate3DM(tuple: (x: 1.0, y: 1.0, z: 1.0, m: 1.0)), Coordinate3DM(tuple: (x: 2.0, y: 2.0, z: 2.0, m: 2.0))]

        XCTAssertTrue(
            (input.elementsEqual(expected) { (lhs: Coordinate3DM, rhs: Coordinate3DM) -> Bool in
                    return lhs == rhs
            }
        ), "\(input) is not equal to \(expected)")
    }

    func testInitCopy() {

        let input = LineString<Coordinate3DM>(other: LineString<Coordinate3DM>(elements: [(x: 1.001, y: 1.001, z: 1.001, m: 1.001), (x: 2.002, y: 2.002, z: 2.002, m: 2.002)]), precision: precision, coordinateSystem: cs)
        let expected = LineString<Coordinate3DM>(elements: [(x: 1.0, y: 1.0, z: 1.0, m: 1.0), (x: 2.0, y: 2.0, z: 2.0, m: 2.0)], precision: precision, coordinateSystem: cs)

        XCTAssertTrue(
            (input.elementsEqual(expected) { (lhs: Coordinate3DM, rhs: Coordinate3DM) -> Bool in
                    return lhs == rhs
            }
        ), "\(input) is not equal to \(expected)")
    }

    // MARK: CustomStringConvertible & CustomDebugStringConvertible

    func testDescription() {

        let input = LineString<Coordinate3DM>(elements: [Coordinate3DM(tuple: (x: 1.001, y: 1.001, z: 1.001, m: 1.001)), Coordinate3DM(tuple: (x: 2.002, y: 2.002, z: 2.002, m: 2.002))], precision: precision, coordinateSystem: cs)
        let expected = "LineString<Coordinate3DM>((x: 1.0, y: 1.0, z: 1.0, m: 1.0), (x: 2.0, y: 2.0, z: 2.0, m: 2.0))"

        XCTAssertEqual(input.description, expected)
    }

    func testDebugDescription() {

        let input = LineString<Coordinate3DM>(elements: [Coordinate3DM(tuple: (x: 1.001, y: 1.001, z: 1.001, m: 1.001)), Coordinate3DM(tuple: (x: 2.002, y: 2.002, z: 2.002, m: 2.002))], precision: precision, coordinateSystem: cs)
        let expected = "LineString<Coordinate3DM>((x: 1.0, y: 1.0, z: 1.0, m: 1.0), (x: 2.0, y: 2.0, z: 2.0, m: 2.0))"

        XCTAssertEqual(input.debugDescription, expected)
    }

    // MARK: Collection conformance

    func testReserveCapacity() {

        var input = LineString<Coordinate3DM>(precision: precision, coordinateSystem: cs)
        let expected = input.capacity * 2

        input.reserveCapacity(expected)

        XCTAssertEqual(input.capacity, expected)
    }

    func testAppend() {

        var input = LineString<Coordinate3DM>(precision: precision, coordinateSystem: cs)
        let expected = [Coordinate3DM(tuple: (x: 1.0, y: 1.0, z: 1.0, m: 1.0))]

        input.append((x: 1.001, y: 1.001, z: 1.001, m: 1.001))

        XCTAssertTrue(input.elementsEqual(expected) { (lhs: Coordinate3DM, rhs: Coordinate3DM) -> Bool in
                return lhs == rhs
        }, "\(input) is not equal to \(expected)")
    }

    func testAppendContentsOf() {

        let input1 = LineString<Coordinate3DM>(elements: [(x: 1.001, y: 1.001, z: 1.001, m: 1.001), (x: 2.002, y: 2.002, z: 2.002, m: 2.002)], precision: precision, coordinateSystem: cs)
        var input2 = LineString<Coordinate3DM>(precision: precision, coordinateSystem: cs)

        input2.append(contentsOf: input1)

        XCTAssertEqual(input1, input2)
    }

    func testAppendContentsOfCoordinates() {

        var input = LineString<Coordinate3DM>(precision: precision, coordinateSystem: cs)
        let expected = [Coordinate3DM(tuple: (x: 1.0, y: 1.0, z: 1.0, m: 1.0)), Coordinate3DM(tuple: (x: 2.0, y: 2.0, z: 2.0, m: 2.0))]

        input.append(contentsOf: expected)

        XCTAssertTrue(input.elementsEqual(expected) { (lhs: Coordinate3DM, rhs: Coordinate3DM) -> Bool in
            return lhs == rhs
        }, "\(input) is not equal to \(expected)")
    }

    func testAppendContentsOfWithTuples() {

        var input = LineString<Coordinate3DM>(precision: precision, coordinateSystem: cs)
        let expected = LineString<Coordinate3DM>(elements: [Coordinate3DM(tuple: (x: 1.0, y: 1.0, z: 1.0, m: 1.0)), Coordinate3DM(tuple: (x: 2.0, y: 2.0, z: 2.0, m: 2.0))], precision: precision, coordinateSystem: cs)

        input.append(contentsOf: [(x: 1.0, y: 1.0, z: 1.0, m: 1.0), (x: 2.0, y: 2.0, z: 2.0, m: 2.0)])

        XCTAssertEqual(input, expected)
    }

    func testInsertCoordinate() {

        var input = LineString<Coordinate3DM>(elements: [Coordinate3DM(tuple: (x: 1.001, y: 1.001, z: 1.001, m: 1.001)), Coordinate3DM(tuple: (x: 2.002, y: 2.002, z: 2.002, m: 2.002))], precision: precision, coordinateSystem: cs)
        let expected = [Coordinate3DM(tuple: (x: 2.0, y: 2.0, z: 2.0, m: 2.0)), Coordinate3DM(tuple: (x: 1.0, y: 1.0, z: 1.0, m: 1.0)), Coordinate3DM(tuple: (x: 2.0, y: 2.0, z: 2.0, m: 2.0))]

        input.insert(Coordinate3DM(tuple: (x: 2.002, y: 2.002, z: 2.002, m: 2.002)), at: 0)

        XCTAssertTrue(input.elementsEqual(expected) { (lhs: Coordinate3DM, rhs: Coordinate3DM) -> Bool in
                return lhs == rhs
            }, "\(input) is not equal to \(expected)")
    }

    func testInsertTuple() {

        var input = LineString<Coordinate3DM>(elements: [Coordinate3DM(tuple: (x: 1.001, y: 1.001, z: 1.001, m: 1.001)), Coordinate3DM(tuple: (x: 2.002, y: 2.002, z: 2.002, m: 2.002))], precision: precision, coordinateSystem: cs)
        let expected = [Coordinate3DM(tuple: (x: 2.0, y: 2.0, z: 2.0, m: 2.0)), Coordinate3DM(tuple: (x: 1.0, y: 1.0, z: 1.0, m: 1.0)), Coordinate3DM(tuple: (x: 2.0, y: 2.0, z: 2.0, m: 2.0))]

        input.insert((x: 2.002, y: 2.002, z: 2.002, m: 2.002), at: 0)

        XCTAssertTrue(input.elementsEqual(expected) { (lhs: Coordinate3DM, rhs: Coordinate3DM) -> Bool in
                return lhs == rhs
            }, "\(input) is not equal to \(expected)")
    }

    func testRemove() {

        var input = LineString<Coordinate3DM>(elements: [Coordinate3DM(tuple: (x: 1.001, y: 1.001, z: 1.001, m: 1.001)), Coordinate3DM(tuple: (x: 2.002, y: 2.002, z: 2.002, m: 2.002))], precision: precision, coordinateSystem: cs)
        let expected = LineString<Coordinate3DM>(elements: [Coordinate3DM(tuple: (x: 2.0, y: 2.0, z: 2.0, m: 2.0))], precision: precision, coordinateSystem: cs)

        let _ = input.remove(at: 0)

        XCTAssertEqual(input, expected)
    }

    func testRemoveLast() {

        var input = LineString<Coordinate3DM>(elements: [Coordinate3DM(tuple: (x: 1.001, y: 1.001, z: 1.001, m: 1.001)), Coordinate3DM(tuple: (x: 2.002, y: 2.002, z: 2.002, m: 2.002))], precision: precision, coordinateSystem: cs)
        let expected = LineString<Coordinate3DM>(elements: [Coordinate3DM(tuple: (x: 1.0, y: 1.0, z: 1.0, m: 1.0))], precision: precision, coordinateSystem: cs)

        let _ = input.removeLast()

        XCTAssertEqual(input, expected)
    }

    func testRemoveAll() {

        var input = LineString<Coordinate3DM>(elements: [Coordinate3DM(tuple: (x: 1.001, y: 1.001, z: 1.001, m: 1.001)), Coordinate3DM(tuple: (x: 2.002, y: 2.002, z: 2.002, m: 2.002))], precision: precision, coordinateSystem: cs)
        let expected = LineString<Coordinate3DM>(precision: precision, coordinateSystem: cs)

        input.removeAll()

        XCTAssertEqual(input, expected)
    }

    func testRemoveAllKeepingCapacity() {

        var input = LineString<Coordinate3DM>(elements: [Coordinate3DM(tuple: (x: 1.001, y: 1.001, z: 1.001, m: 1.001)), Coordinate3DM(tuple: (x: 2.002, y: 2.002, z: 2.002, m: 2.002))], precision: precision, coordinateSystem: cs)
        let expected = input.capacity

        input.removeAll(keepingCapacity: true)

        XCTAssertEqual(input.capacity, expected)
    }

    // MARK: Swift.Collection Conformance

    func testSubscriptGet() {

        let input = LineString<Coordinate3DM>(elements: [(x: 1.001, y: 1.001, z: 1.001, m: 1.001), (x: 2.002, y: 2.002, z: 2.002, m: 2.002)], precision: precision, coordinateSystem: cs)

        XCTAssertEqual(input[1], Coordinate3DM(tuple: (x: 2.0, y: 2.0, z: 2.0, m: 2.0)))
    }

    func testSubscriptSet() {

        var input = LineString<Coordinate3DM>(elements: [(x: 1.001, y: 1.001, z: 1.001, m: 1.001), (x: 2.002, y: 2.002, z: 2.002, m: 2.002)], precision: precision, coordinateSystem: cs)

        input[1] = Coordinate3DM(tuple: (x: 1.001, y: 1.001, z: 1.001, m: 1.001))

        XCTAssertEqual(input[1], Coordinate3DM(tuple: (x: 1.0, y: 1.0, z: 1.0, m: 1.0)))
    }

    func testEquals() {

        XCTAssertEqual(LineString<Coordinate3DM>(elements: [Coordinate3DM(tuple: (x: 1.001, y: 1.001, z: 1.001, m: 1.001)), Coordinate3DM(tuple: (x: 2.002, y: 2.002, z: 2.002, m: 2.002))], precision: precision, coordinateSystem: cs).equals(LineString<Coordinate3DM>(elements: [Coordinate3DM(tuple: (x: 1.0, y: 1.0, z: 1.0, m: 1.0)), Coordinate3DM(tuple: (x: 2.0, y: 2.0, z: 2.0, m: 2.0))], precision: precision, coordinateSystem: cs)), true)
    }

    func testIsEmpty() {

        XCTAssertEqual(LineString<Coordinate3DM>(precision: precision, coordinateSystem: cs).isEmpty(), true)
    }

    func testIsEmptyFalse() {

        XCTAssertEqual(LineString<Coordinate3DM>(elements: [Coordinate3DM(tuple: (x: 1.001, y: 1.001, z: 1.001, m: 1.001)), Coordinate3DM(tuple: (x: 2.002, y: 2.002, z: 2.002, m: 2.002))], precision: precision, coordinateSystem: cs).isEmpty(), false)
    }

    func testCount() {

        XCTAssertEqual(LineString<Coordinate3DM>(elements: [Coordinate3DM(tuple: (x: 1.001, y: 1.001, z: 1.001, m: 1.001)), Coordinate3DM(tuple: (x: 2.002, y: 2.002, z: 2.002, m: 2.002))], precision: precision, coordinateSystem: cs).count, 2)
    }

    // MARK: Misc Internal

    func testEnsureUniquelyReferenced() {

        var input = LineString<Coordinate3DM>(precision: precision, coordinateSystem: cs)
        let expected = input.capacity * 2

        let copy = input    // This should force the reserveCapacity to clone
        let _ = copy.capacity

        input.reserveCapacity(expected)

        XCTAssertEqual(input.capacity, expected)
    }

    func testResizeIfNeeded() {

        var input = LineString<Coordinate3DM>(precision: precision, coordinateSystem: cs)
        let expected = input.capacity * 2

        /// Force it beyond its initial capacity
        for _ in 0..<input.capacity + 1 {
            input.append((x: 1.001, y: 1.001, z: 1.001, m: 1.001))
        }
        XCTAssertEqual(input.capacity, expected)
    }
}
