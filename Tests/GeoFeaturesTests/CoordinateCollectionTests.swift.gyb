%{

# Parameters
#
#   FileName: The name of the target file
#   GeometryType: The name of the geometry type this test is testing. eg. LineString
#

Self = FileName.replace('+', '').split('.')[0]

Variants = [
    ('Coordinate2D', 'FloatingPrecision', '()', 'Cartesian', '()', '(x: 1.0, y: 1.0)', '(x: 2.0, y: 2.0)','(x: 1.0, y: 1.0)', '(x: 2.0, y: 2.0)'),
    ('Coordinate2DM','FloatingPrecision', '()', 'Cartesian', '()', '(x: 1.0, y: 1.0, m: 1.0)', '(x: 2.0, y: 2.0, m: 2.0)', '(x: 1.0, y: 1.0, m: 1.0)', '(x: 2.0, y: 2.0, m: 2.0)'),
    ('Coordinate3D', 'FloatingPrecision', '()', 'Cartesian', '()', '(x: 1.0, y: 1.0, z: 1.0)', '(x: 2.0, y: 2.0, z: 2.0)', '(x: 1.0, y: 1.0, z: 1.0)', '(x: 2.0, y: 2.0, z: 2.0)'),
    ('Coordinate3DM','FloatingPrecision', '()', 'Cartesian', '()', '(x: 1.0, y: 1.0, z: 1.0, m: 1.0)', '(x: 2.0, y: 2.0, z: 2.0, m: 2.0)','(x: 1.0, y: 1.0, z: 1.0, m: 1.0)', '(x: 2.0, y: 2.0, z: 2.0, m: 2.0)'),

    ('Coordinate2D', 'FixedPrecision', '(scale: 100)', 'Cartesian', '()', '(x: 1.001, y: 1.001)', '(x: 2.002, y: 2.002)', '(x: 1.0, y: 1.0)', '(x: 2.0, y: 2.0)'),
    ('Coordinate2DM','FixedPrecision', '(scale: 100)', 'Cartesian', '()', '(x: 1.001, y: 1.001, m: 1.001)', '(x: 2.002, y: 2.002, m: 2.002)', '(x: 1.0, y: 1.0, m: 1.0)', '(x: 2.0, y: 2.0, m: 2.0)'),
    ('Coordinate3D', 'FixedPrecision', '(scale: 100)', 'Cartesian', '()', '(x: 1.001, y: 1.001, z: 1.001)', '(x: 2.002, y: 2.002, z: 2.002)', '(x: 1.0, y: 1.0, z: 1.0)', '(x: 2.0, y: 2.0, z: 2.0)'),
    ('Coordinate3DM','FixedPrecision', '(scale: 100)', 'Cartesian', '()', '(x: 1.001, y: 1.001, z: 1.001, m: 1.001)', '(x: 2.002, y: 2.002, z: 2.002, m: 2.002)', '(x: 1.0, y: 1.0, z: 1.0, m: 1.0)', '(x: 2.0, y: 2.0, z: 2.0, m: 2.0)'),
]

}%
///
///  ${Self}Tests.swift
///
///  Copyright (c) 2016 Tony Stone
///
///  Licensed under the Apache License, Version 2.0 (the "License");
///  you may not use this file except in compliance with the License.
///  You may obtain a copy of the License at
///
///  http://www.apache.org/licenses/LICENSE-2.0
///
///  Unless required by applicable law or agreed to in writing, software
///  distributed under the License is distributed on an "AS IS" BASIS,
///  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
///  See the License for the specific language governing permissions and
///  limitations under the License.
///
///  Created by Tony Stone on 2/10/2016.
///
import XCTest
import GeoFeatures

///
/// NOTE: This file was auto generated by gyb from file CoordinateCollectionTests.swift.gyb using the following command.
///
/// gyb --line-directive '' -DGeometryType=${GeometryType} -o ${FileName} CoordinateCollectionTests.swift.gyb
///
/// Do NOT edit this file directly as it will be regenerated automatically when needed.
///
% for (CoordinateType, PrecisionType, PrecisionParameters, ReferenceSystemType, ReferenceSystemParameters, TestTuple0, TestTuple1, ExpectedTuple0, ExpectedTuple1) in Variants:
%{

Precision = PrecisionType + PrecisionParameters

CoordinateSystem = ReferenceSystemType + ReferenceSystemParameters

FunctionQualifier = CoordinateType + PrecisionType + ReferenceSystemType

}%

// MARK: - ${CoordinateType}, ${PrecisionType}, ${ReferenceSystemType} -

class ${Self}${FunctionQualifier}Tests: XCTestCase {

    let precision = ${Precision}
    let cs        = ${CoordinateSystem}

    // MARK: Construction

    func testInitWithPrecisionAndCRS() {

        XCTAssertEqual(${GeometryType}<${CoordinateType}>(precision: precision, coordinateSystem: cs).isEmpty, true)
    }

    func testInitWithPrecision() {

        XCTAssertEqual(${GeometryType}<${CoordinateType}>(precision: precision).precision as? ${PrecisionType}, precision)
    }

    func testInitWithCRS() {

        XCTAssertEqual(${GeometryType}<${CoordinateType}>(coordinateSystem: cs).coordinateSystem as? ${ReferenceSystemType}, cs)
    }

    func testInitWithTuple() {

        let input = ${GeometryType}<${CoordinateType}>(elements: [${TestTuple0}, ${TestTuple1}], precision: precision, coordinateSystem: cs)
        let expected = [${CoordinateType}(tuple: ${ExpectedTuple0}), ${CoordinateType}(tuple: ${ExpectedTuple1})]

        XCTAssertTrue(
            (input.elementsEqual(expected) { (lhs: ${CoordinateType}, rhs: ${CoordinateType}) -> Bool in
                    return lhs == rhs
            }
        ), "\(input) is not equal to \(expected)")
    }

    func testInitCopy() {

        let input = ${GeometryType}<${CoordinateType}>(other: ${GeometryType}<${CoordinateType}>(elements: [${TestTuple0}, ${TestTuple1}]), precision: precision, coordinateSystem: cs)
        let expected = ${GeometryType}<${CoordinateType}>(elements: [${ExpectedTuple0}, ${ExpectedTuple1}], precision: precision, coordinateSystem: cs)

        XCTAssertTrue(
            (input.elementsEqual(expected) { (lhs: ${CoordinateType}, rhs: ${CoordinateType}) -> Bool in
                    return lhs == rhs
            }
        ), "\(input) is not equal to \(expected)")
    }

    // MARK: CustomStringConvertible & CustomDebugStringConvertible

    func testDescription() {

        let input = ${GeometryType}<${CoordinateType}>(elements: [${CoordinateType}(tuple: ${TestTuple0}), ${CoordinateType}(tuple: ${TestTuple1})], precision: precision, coordinateSystem: cs)
        let expected = "${GeometryType}<${CoordinateType}>(${ExpectedTuple0}, ${ExpectedTuple1})"

        XCTAssertEqual(input.description, expected)
    }

    func testDebugDescription() {

        let input = ${GeometryType}<${CoordinateType}>(elements: [${CoordinateType}(tuple: ${TestTuple0}), ${CoordinateType}(tuple: ${TestTuple1})], precision: precision, coordinateSystem: cs)
        let expected = "${GeometryType}<${CoordinateType}>(${ExpectedTuple0}, ${ExpectedTuple1})"

        XCTAssertEqual(input.debugDescription, expected)
    }

    // MARK: Collection conformance

    func testReserveCapacity() {

        var input = ${GeometryType}<${CoordinateType}>(precision: precision, coordinateSystem: cs)
        let expected = input.capacity * 2

        input.reserveCapacity(expected)

        XCTAssertEqual(input.capacity, expected)
    }

    func testAppend() {

        var input = ${GeometryType}<${CoordinateType}>(precision: precision, coordinateSystem: cs)
        let expected = [${CoordinateType}(tuple: ${ExpectedTuple0})]

        input.append(${TestTuple0})

        XCTAssertTrue(input.elementsEqual(expected) { (lhs: ${CoordinateType}, rhs: ${CoordinateType}) -> Bool in
                return lhs == rhs
        }, "\(input) is not equal to \(expected)")
    }

    func testAppendContentsOf() {

        let input1 = ${GeometryType}<${CoordinateType}>(elements: [${TestTuple0}, ${TestTuple1}], precision: precision, coordinateSystem: cs)
        var input2 = ${GeometryType}<${CoordinateType}>(precision: precision, coordinateSystem: cs)

        input2.append(contentsOf: input1)

        XCTAssertEqual(input1, input2)
    }

    func testAppendContentsOfCoordinates() {

        var input = ${GeometryType}<${CoordinateType}>(precision: precision, coordinateSystem: cs)
        let expected = [${CoordinateType}(tuple: ${ExpectedTuple0}), ${CoordinateType}(tuple: ${ExpectedTuple1})]

        input.append(contentsOf: expected)

        XCTAssertTrue(input.elementsEqual(expected) { (lhs: ${CoordinateType}, rhs: ${CoordinateType}) -> Bool in
            return lhs == rhs
        }, "\(input) is not equal to \(expected)")
    }

    func testAppendContentsOfWithTuples() {

        var input = ${GeometryType}<${CoordinateType}>(precision: precision, coordinateSystem: cs)
        let expected = ${GeometryType}<${CoordinateType}>(elements: [${CoordinateType}(tuple: ${ExpectedTuple0}), ${CoordinateType}(tuple: ${ExpectedTuple1})], precision: precision, coordinateSystem: cs)

        input.append(contentsOf: [${ExpectedTuple0}, ${ExpectedTuple1}])

        XCTAssertEqual(input, expected)
    }

    func testInsertCoordinate() {

        var input = ${GeometryType}<${CoordinateType}>(elements: [${CoordinateType}(tuple: ${TestTuple0}), ${CoordinateType}(tuple: ${TestTuple1})], precision: precision, coordinateSystem: cs)
        let expected = [${CoordinateType}(tuple: ${ExpectedTuple1}), ${CoordinateType}(tuple: ${ExpectedTuple0}), ${CoordinateType}(tuple: ${ExpectedTuple1})]

        input.insert(${CoordinateType}(tuple: ${TestTuple1}), at: 0)

        XCTAssertTrue(input.elementsEqual(expected) { (lhs: ${CoordinateType}, rhs: ${CoordinateType}) -> Bool in
                return lhs == rhs
            }, "\(input) is not equal to \(expected)")
    }

    func testInsertTuple() {

        var input = ${GeometryType}<${CoordinateType}>(elements: [${CoordinateType}(tuple: ${TestTuple0}), ${CoordinateType}(tuple: ${TestTuple1})], precision: precision, coordinateSystem: cs)
        let expected = [${CoordinateType}(tuple: ${ExpectedTuple1}), ${CoordinateType}(tuple: ${ExpectedTuple0}), ${CoordinateType}(tuple: ${ExpectedTuple1})]

        input.insert(${TestTuple1}, at: 0)

        XCTAssertTrue(input.elementsEqual(expected) { (lhs: ${CoordinateType}, rhs: ${CoordinateType}) -> Bool in
                return lhs == rhs
            }, "\(input) is not equal to \(expected)")
    }

    func testRemove() {

        var input = ${GeometryType}<${CoordinateType}>(elements: [${CoordinateType}(tuple: ${TestTuple0}), ${CoordinateType}(tuple: ${TestTuple1})], precision: precision, coordinateSystem: cs)
        let expected = ${GeometryType}<${CoordinateType}>(elements: [${CoordinateType}(tuple: ${ExpectedTuple1})], precision: precision, coordinateSystem: cs)

        let _ = input.remove(at: 0)

        XCTAssertEqual(input, expected)
    }

    func testRemoveLast() {

        var input = ${GeometryType}<${CoordinateType}>(elements: [${CoordinateType}(tuple: ${TestTuple0}), ${CoordinateType}(tuple: ${TestTuple1})], precision: precision, coordinateSystem: cs)
        let expected = ${GeometryType}<${CoordinateType}>(elements: [${CoordinateType}(tuple: ${ExpectedTuple0})], precision: precision, coordinateSystem: cs)

        let _ = input.removeLast()

        XCTAssertEqual(input, expected)
    }

    func testRemoveAll() {

        var input = ${GeometryType}<${CoordinateType}>(elements: [${CoordinateType}(tuple: ${TestTuple0}), ${CoordinateType}(tuple: ${TestTuple1})], precision: precision, coordinateSystem: cs)
        let expected = ${GeometryType}<${CoordinateType}>(precision: precision, coordinateSystem: cs)

        input.removeAll()

        XCTAssertEqual(input, expected)
    }

    func testRemoveAllKeepingCapacity() {

        var input = ${GeometryType}<${CoordinateType}>(elements: [${CoordinateType}(tuple: ${TestTuple0}), ${CoordinateType}(tuple: ${TestTuple1})], precision: precision, coordinateSystem: cs)
        let expected = input.capacity

        input.removeAll(keepingCapacity: true)

        XCTAssertEqual(input.capacity, expected)
    }

    // MARK: Swift.Collection Conformance

    func testSubscriptGet() {

        let input = ${GeometryType}<${CoordinateType}>(elements: [${TestTuple0}, ${TestTuple1}], precision: precision, coordinateSystem: cs)

        XCTAssertEqual(input[1], ${CoordinateType}(tuple: ${ExpectedTuple1}))
    }

    func testSubscriptSet() {

        var input = ${GeometryType}<${CoordinateType}>(elements: [${TestTuple0}, ${TestTuple1}], precision: precision, coordinateSystem: cs)

        input[1] = ${CoordinateType}(tuple: ${TestTuple0})

        XCTAssertEqual(input[1], ${CoordinateType}(tuple: ${ExpectedTuple0}))
    }

    func testEquals() {

        XCTAssertEqual(${GeometryType}<${CoordinateType}>(elements: [${CoordinateType}(tuple: ${TestTuple0}), ${CoordinateType}(tuple: ${TestTuple1})], precision: precision, coordinateSystem: cs).equals(${GeometryType}<${CoordinateType}>(elements: [${CoordinateType}(tuple: ${ExpectedTuple0}), ${CoordinateType}(tuple: ${ExpectedTuple1})], precision: precision, coordinateSystem: cs)), true)
    }

    func testIsEmpty() {

        XCTAssertEqual(${GeometryType}<${CoordinateType}>(precision: precision, coordinateSystem: cs).isEmpty(), true)
    }

    func testIsEmptyFalse() {

        XCTAssertEqual(${GeometryType}<${CoordinateType}>(elements: [${CoordinateType}(tuple: ${TestTuple0}), ${CoordinateType}(tuple: ${TestTuple1})], precision: precision, coordinateSystem: cs).isEmpty(), false)
    }

    func testCount() {

        XCTAssertEqual(${GeometryType}<${CoordinateType}>(elements: [${CoordinateType}(tuple: ${TestTuple0}), ${CoordinateType}(tuple: ${TestTuple1})], precision: precision, coordinateSystem: cs).count, 2)
    }

    // MARK: Misc Internal

    func testEnsureUniquelyReferenced() {

        var input = ${GeometryType}<${CoordinateType}>(precision: precision, coordinateSystem: cs)
        let expected = input.capacity * 2

        let copy = input    // This should force the reserveCapacity to clone
        let _ = copy.capacity

        input.reserveCapacity(expected)

        XCTAssertEqual(input.capacity, expected)
    }

    func testResizeIfNeeded() {

        var input = ${GeometryType}<${CoordinateType}>(precision: precision, coordinateSystem: cs)
        let expected = input.capacity * 2

        /// Force it beyond its initial capacity
        for _ in 0..<input.capacity + 1 {
            input.append(${TestTuple0})
        }
        XCTAssertEqual(input.capacity, expected)
    }
}
%end
