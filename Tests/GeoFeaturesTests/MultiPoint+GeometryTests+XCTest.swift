///
/// MultiPoint+GeometryTests+XCTest.swift
///
/// Copyright 2016 Tony Stone
///
///  Licensed under the Apache License, Version 2.0 (the "License");
///  you may not use this file except in compliance with the License.
///  You may obtain a copy of the License at
///
///  http://www.apache.org/licenses/LICENSE-2.0
///
///  Unless required by applicable law or agreed to in writing, software
///  distributed under the License is distributed on an "AS IS" BASIS,
///  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
///  See the License for the specific language governing permissions and
///  limitations under the License.
///
///  Created by Tony Stone on 5/4/16.
///
import XCTest

///
/// NOTE: This file was auto generated by file process_test_files.rb.
///
/// Do NOT edit this file directly as it will be regenerated automatically when needed.
///

extension MultiPointGeometryCoordinate2DFloatingPrecisionCartesianTests {

   static var allTests: [(String, (MultiPointGeometryCoordinate2DFloatingPrecisionCartesianTests) -> () throws -> Void)] {
      return [
                ("testDimension", testDimension),
                ("testBoundary", testBoundary),
                ("testBoundaryEmpty", testBoundaryEmpty)
           ]
   }
}
extension MultiPointGeometryCoordinate2DMFloatingPrecisionCartesianTests {

   static var allTests: [(String, (MultiPointGeometryCoordinate2DMFloatingPrecisionCartesianTests) -> () throws -> Void)] {
      return [
                ("testDimension", testDimension),
                ("testBoundary", testBoundary),
                ("testBoundaryEmpty", testBoundaryEmpty)
           ]
   }
}
extension MultiPointGeometryCoordinate3DFloatingPrecisionCartesianTests {

   static var allTests: [(String, (MultiPointGeometryCoordinate3DFloatingPrecisionCartesianTests) -> () throws -> Void)] {
      return [
                ("testDimension", testDimension),
                ("testBoundary", testBoundary),
                ("testBoundaryEmpty", testBoundaryEmpty)
           ]
   }
}
extension MultiPointGeometryCoordinate3DMFloatingPrecisionCartesianTests {

   static var allTests: [(String, (MultiPointGeometryCoordinate3DMFloatingPrecisionCartesianTests) -> () throws -> Void)] {
      return [
                ("testDimension", testDimension),
                ("testBoundary", testBoundary),
                ("testBoundaryEmpty", testBoundaryEmpty)
           ]
   }
}
extension MultiPointGeometryCoordinate2DFixedPrecisionCartesianTests {

   static var allTests: [(String, (MultiPointGeometryCoordinate2DFixedPrecisionCartesianTests) -> () throws -> Void)] {
      return [
                ("testDimension", testDimension),
                ("testBoundary", testBoundary),
                ("testBoundaryEmpty", testBoundaryEmpty)
           ]
   }
}
extension MultiPointGeometryCoordinate2DMFixedPrecisionCartesianTests {

   static var allTests: [(String, (MultiPointGeometryCoordinate2DMFixedPrecisionCartesianTests) -> () throws -> Void)] {
      return [
                ("testDimension", testDimension),
                ("testBoundary", testBoundary),
                ("testBoundaryEmpty", testBoundaryEmpty)
           ]
   }
}
extension MultiPointGeometryCoordinate3DFixedPrecisionCartesianTests {

   static var allTests: [(String, (MultiPointGeometryCoordinate3DFixedPrecisionCartesianTests) -> () throws -> Void)] {
      return [
                ("testDimension", testDimension),
                ("testBoundary", testBoundary),
                ("testBoundaryEmpty", testBoundaryEmpty),
                ("testEqualTrue", testEqualTrue),
                ("testEqualFalse", testEqualFalse)
           ]
   }
}
extension MultiPointGeometryCoordinate3DMFixedPrecisionCartesianTests {

   static var allTests: [(String, (MultiPointGeometryCoordinate3DMFixedPrecisionCartesianTests) -> () throws -> Void)] {
      return [
                ("testDimension", testDimension),
                ("testBoundary", testBoundary),
                ("testBoundaryEmpty", testBoundaryEmpty),
                ("testEqualTrue", testEqualTrue),
                ("testEqualFalse", testEqualFalse)
           ]
   }
}
